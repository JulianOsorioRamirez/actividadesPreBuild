{"ast":null,"code":"import _objectSpread from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/PruebaDespliegueAzure/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/PruebaDespliegueAzure/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\PruebaDespliegueAzure\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\Catalog\\\\TaskShared\\\\TaskSharedRegisterScreen\\\\TaskSharedRegisterScreen.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { FormControl, InputLabel, ListItemText, makeStyles, MenuItem, Select, DatePickerField } from '@material-ui/core';\nimport Card from 'components/Card/Card';\nimport CardBody from 'components/Card/CardBody';\nimport GridContainer from 'components/Grid/GridContainer';\nimport GridItem from 'components/Grid/GridItem';\nimport Button from 'components/CustomButtons/Button';\nimport CustomInput from 'components/CustomInput/CustomInput';\nimport SnackbarContent from 'components/Snackbar/SnackbarContent';\nimport TasksSharedSelect from './components/TasksSharedSelect';\nimport { SHARED_LIST_RESET } from 'redux/constants/sharedConstants';\nimport { SHARED_REGISTER_RESET, SHARED_LIST_BY_TASK_ID_RESET } from 'redux/constants/sharedConstants';\nimport { getSharedByTaskId, registerShared } from 'redux/actions/sharedActions';\nimport styles from './styles/sharedRegisterStyles';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(styles);\n\nvar sharedRegister = function sharedRegister() {\n  _s();\n\n  var classes = useStyles();\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      taskSharedId = _useState2[0],\n      setTaskSharedId = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      alert = _useState4[0],\n      setAlert = _useState4[1];\n\n  var _useState5 = useState( /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      componentePorcentajes = _useState6[0],\n      setComponentePorcentajes = _useState6[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.sharedListByTaskId;\n  }),\n      loadingSharedListByTaskId = _useSelector.loadingSharedListByTaskId,\n      sharedListByTaskId = _useSelector.sharedListByTaskId,\n      successSharedListByTaskId = _useSelector.successSharedListByTaskId;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.sharedRegister;\n  }),\n      loadingSharedRegister = _useSelector2.loadingSharedRegister,\n      successSharedRegister = _useSelector2.successSharedRegister,\n      errorSharedRegister = _useSelector2.errorSharedRegister;\n\n  var initialState = {\n    idpuestos: [],\n    puestos: [],\n    porcentajes: []\n  };\n\n  var _useState7 = useState(initialState),\n      _useState8 = _slicedToArray(_useState7, 2),\n      sharedInfo = _useState8[0],\n      setSharedInfo = _useState8[1];\n\n  useEffect(function () {\n    if (successSharedListByTaskId) {\n      sharedInfo.idpuestos = [];\n      sharedInfo.puestos = [];\n      sharedInfo.porcentajes = [];\n      sharedListByTaskId === null || sharedListByTaskId === void 0 ? void 0 : sharedListByTaskId.map(function (item) {\n        sharedInfo.puestos.push(\"\".concat(item === null || item === void 0 ? void 0 : item.nombre, \" \").concat(item === null || item === void 0 ? void 0 : item.apellido1, \" \").concat((item === null || item === void 0 ? void 0 : item.apellido2) || ''));\n        sharedInfo.idpuestos.push(item.id_puesto);\n        sharedInfo.porcentajes.push(item.porcentaje_responsabilidad);\n        setTaskSharedId(item.id_tarea);\n      });\n      construirPorcentajes();\n    }\n  }, [successSharedListByTaskId]);\n\n  var construirPorcentajes = function construirPorcentajes() {\n    var listado = [];\n\n    var _loop = function _loop(i) {\n      listado.push( /*#__PURE__*/_jsxDEV(GridContainer, {\n        children: [/*#__PURE__*/_jsxDEV(GridItem, {\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(CustomInput, {\n            labelText: 'Puesto',\n            id: \"puesto\",\n            formControlProps: {\n              fullWidth: true\n            },\n            inputProps: {\n              value: sharedInfo.puestos[i],\n              type: 'text',\n              disabled: 'true'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(GridItem, {\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(CustomInput, {\n            labelText: 'Porcentaje de responsabilidad',\n            id: \"porcentaje\",\n            formControlProps: {\n              fullWidth: true\n            },\n            inputProps: {\n              value: sharedInfo.porcentajes[i],\n              onChange: function onChange(e) {\n                sharedInfo.porcentajes[i] = e.target.value;\n                construirPorcentajes();\n              },\n              type: 'number',\n              maxLength: 3,\n              required: true\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, _this));\n    };\n\n    for (var i = 0; i < sharedListByTaskId.length; i++) {\n      _loop(i);\n    }\n\n    setComponentePorcentajes(listado);\n  };\n\n  useEffect(function () {\n    return function () {\n      dispatch({\n        type: SHARED_REGISTER_RESET\n      });\n      dispatch({\n        type: SHARED_LIST_BY_TASK_ID_RESET\n      });\n      dispatch({\n        type: SHARED_LIST_RESET\n      });\n      setSharedInfo(initialState);\n      setAlert(false);\n      setComponentePorcentajes( /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false));\n    };\n  }, [dispatch]);\n  useEffect(function () {\n    if (successSharedRegister) {\n      setTaskSharedId('');\n      setAlert( /*#__PURE__*/_jsxDEV(SweetAlert, {\n        success: true,\n        style: {\n          display: 'block',\n          marginTop: '-100px'\n        },\n        title: \"Hecho!\",\n        onConfirm: function onConfirm() {\n          return confirmSuccess();\n        },\n        onCancel: function onCancel() {\n          return confirmSuccess();\n        },\n        confirmBtnCssClass: classes.confirmBtnCssClass,\n        children: \"'Porcentaje de responsabilidad registrado correctamente'\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, _this));\n    }\n  }, [successSharedRegister]);\n\n  var confirmSuccess = function confirmSuccess() {\n    dispatch({\n      type: SHARED_REGISTER_RESET\n    });\n    dispatch({\n      type: SHARED_LIST_BY_TASK_ID_RESET\n    });\n    dispatch({\n      type: SHARED_LIST_RESET\n    });\n    setSharedInfo(initialState);\n    setAlert(false);\n    setComponentePorcentajes( /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false));\n  };\n\n  var handleShared = function handleShared(e) {\n    e.preventDefault();\n    dispatch(registerShared(_objectSpread({\n      id_tarea: taskSharedId\n    }, sharedInfo)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(GridContainer, {\n    children: [/*#__PURE__*/_jsxDEV(GridItem, {\n      xs: 12,\n      md: 8,\n      className: classes.rootItem,\n      children: /*#__PURE__*/_jsxDEV(GridContainer, {\n        children: [/*#__PURE__*/_jsxDEV(TasksSharedSelect, {\n          setTaskSharedId: setTaskSharedId,\n          taskSharedId: taskSharedId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(GridItem, {\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            disabled: !taskSharedId,\n            color: \"primary\",\n            onClick: function onClick() {\n              return dispatch(getSharedByTaskId(taskSharedId));\n            },\n            children: \"Buscar Tareas compartidas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(GridItem, {\n      xs: 12,\n      sm: 12,\n      md: 10,\n      style: {\n        margin: '0 auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleShared,\n            children: [loadingSharedListByTaskId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: \"Cargando porcentajes\"\n            }, void 0, false) : sharedListByTaskId && componentePorcentajes, errorSharedRegister && /*#__PURE__*/_jsxDEV(GridContainer, {\n              children: /*#__PURE__*/_jsxDEV(GridItem, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(SnackbarContent, {\n                  message: errorSharedRegister,\n                  color: \"danger\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 21\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 19\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, _this), sharedListByTaskId && /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              color: \"primary\",\n              className: classes.registerButton,\n              children: loadingSharedRegister ? 'Registrando porcentaje compartido...' : 'Registrar porcentaje'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, _this), alert]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(sharedRegister, \"jC0eCcVRqvqBXvoXOzCtHL9wZNM=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\nexport default sharedRegister;","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/PruebaDespliegueAzure/Frontend/src/screens/control-panel/Catalog/TaskShared/TaskSharedRegisterScreen/TaskSharedRegisterScreen.js"],"names":["useState","useEffect","useDispatch","useSelector","SweetAlert","FormControl","InputLabel","ListItemText","makeStyles","MenuItem","Select","DatePickerField","Card","CardBody","GridContainer","GridItem","Button","CustomInput","SnackbarContent","TasksSharedSelect","SHARED_LIST_RESET","SHARED_REGISTER_RESET","SHARED_LIST_BY_TASK_ID_RESET","getSharedByTaskId","registerShared","styles","useStyles","sharedRegister","classes","dispatch","taskSharedId","setTaskSharedId","alert","setAlert","componentePorcentajes","setComponentePorcentajes","state","sharedListByTaskId","loadingSharedListByTaskId","successSharedListByTaskId","loadingSharedRegister","successSharedRegister","errorSharedRegister","initialState","idpuestos","puestos","porcentajes","sharedInfo","setSharedInfo","map","item","push","nombre","apellido1","apellido2","id_puesto","porcentaje_responsabilidad","id_tarea","construirPorcentajes","listado","i","fullWidth","value","type","disabled","onChange","e","target","maxLength","required","length","display","marginTop","confirmSuccess","confirmBtnCssClass","handleShared","preventDefault","rootItem","margin","registerButton"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport SweetAlert from 'react-bootstrap-sweetalert'\r\nimport { FormControl, InputLabel, ListItemText, makeStyles, MenuItem, Select, DatePickerField } from '@material-ui/core'\r\nimport Card from 'components/Card/Card'\r\nimport CardBody from 'components/Card/CardBody'\r\nimport GridContainer from 'components/Grid/GridContainer'\r\nimport GridItem from 'components/Grid/GridItem'\r\nimport Button from 'components/CustomButtons/Button'\r\nimport CustomInput from 'components/CustomInput/CustomInput'\r\nimport SnackbarContent from 'components/Snackbar/SnackbarContent'\r\nimport TasksSharedSelect from './components/TasksSharedSelect'\r\nimport { SHARED_LIST_RESET } from 'redux/constants/sharedConstants'\r\nimport {\r\n  SHARED_REGISTER_RESET,\r\n  SHARED_LIST_BY_TASK_ID_RESET,\r\n} from 'redux/constants/sharedConstants'\r\nimport { getSharedByTaskId, registerShared } from 'redux/actions/sharedActions'\r\nimport styles from './styles/sharedRegisterStyles'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nconst sharedRegister = () => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const [taskSharedId, setTaskSharedId] = useState('')\r\n  const [alert, setAlert] = useState(null)\r\n  const [componentePorcentajes, setComponentePorcentajes] = useState(<></>)\r\n\r\n  const { loadingSharedListByTaskId, sharedListByTaskId, successSharedListByTaskId } = useSelector(\r\n    (state) => state.sharedListByTaskId\r\n  )\r\n  const { loadingSharedRegister, successSharedRegister, errorSharedRegister } = useSelector(\r\n    (state) => state.sharedRegister\r\n  )\r\n  \r\n  const initialState = {\r\n    idpuestos: [],\r\n    puestos: [],\r\n    porcentajes: [],\r\n  }\r\n\r\n  const [sharedInfo, setSharedInfo] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    if (successSharedListByTaskId) {      \r\n      sharedInfo.idpuestos = []\r\n      sharedInfo.puestos = []\r\n      sharedInfo.porcentajes = []\r\n      sharedListByTaskId?.map((item) => {       \r\n        sharedInfo.puestos.push (`${item?.nombre} ${item?.apellido1} ${item?.apellido2 || ''}`)\r\n        sharedInfo.idpuestos.push(item.id_puesto)\r\n        sharedInfo.porcentajes.push(item.porcentaje_responsabilidad)\r\n        setTaskSharedId (item.id_tarea)\r\n      })      \r\n      construirPorcentajes()\r\n    }  \r\n  }, [successSharedListByTaskId])\r\n\r\n  const construirPorcentajes = () => {\r\n    var listado = []\r\n      for(let i = 0; i < sharedListByTaskId.length; i++) {\r\n        listado.push(\r\n          <GridContainer>\r\n            <GridItem xs={12} md={6}>\r\n              <CustomInput\r\n                labelText={'Puesto'}\r\n                id='puesto'\r\n                formControlProps={{\r\n                  fullWidth: true,\r\n                }}\r\n                inputProps={{\r\n                  value: sharedInfo.puestos[i],\r\n                  type: 'text',\r\n                  disabled: 'true',\r\n                }}\r\n              />\r\n            </GridItem>            \r\n            <GridItem xs={12} md={6}>\r\n              <CustomInput                    \r\n                labelText={'Porcentaje de responsabilidad'}\r\n                id='porcentaje'\r\n                formControlProps={{\r\n                  fullWidth: true,\r\n                }}\r\n                inputProps={{\r\n                  value: sharedInfo.porcentajes[i],\r\n                  onChange: (e) => { sharedInfo.porcentajes[i] = e.target.value; construirPorcentajes()},\r\n                  type: 'number',\r\n                  maxLength: 3,\r\n                  required: true,\r\n                }}\r\n              />             \r\n            </GridItem>\r\n          </GridContainer>\r\n        )\r\n      }\r\n      setComponentePorcentajes(listado)\r\n  }\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch({ type: SHARED_REGISTER_RESET })\r\n      dispatch({ type: SHARED_LIST_BY_TASK_ID_RESET })\r\n      dispatch({ type: SHARED_LIST_RESET })\r\n      setSharedInfo(initialState)\r\n      setAlert(false)\r\n      setComponentePorcentajes(<></>)\r\n    }\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    if (successSharedRegister) {\r\n      setTaskSharedId('')\r\n      setAlert(\r\n        <SweetAlert\r\n          success\r\n          style={{ display: 'block', marginTop: '-100px' }}\r\n          title='Hecho!'\r\n          onConfirm={() => confirmSuccess()}\r\n          onCancel={() => confirmSuccess()}\r\n          confirmBtnCssClass={classes.confirmBtnCssClass}\r\n        >\r\n        'Porcentaje de responsabilidad registrado correctamente'\r\n        </SweetAlert>\r\n      )\r\n    }\r\n  }, [successSharedRegister])\r\n\r\n  const confirmSuccess = () => {\r\n    dispatch({ type: SHARED_REGISTER_RESET })\r\n    dispatch({ type: SHARED_LIST_BY_TASK_ID_RESET })\r\n    dispatch({ type: SHARED_LIST_RESET })\r\n    setSharedInfo(initialState)\r\n    setAlert(false)\r\n    setComponentePorcentajes(<></>)\r\n  }\r\n\r\n  const handleShared = (e) => {\r\n    e.preventDefault()\r\n    dispatch(\r\n      registerShared({\r\n        id_tarea: taskSharedId,\r\n        ...sharedInfo,\r\n      })\r\n    )\r\n  }\r\n\r\n  return (\r\n    <GridContainer>\r\n      <GridItem xs={12} md={8} className={classes.rootItem}>\r\n        <GridContainer>\r\n          <TasksSharedSelect setTaskSharedId={setTaskSharedId} taskSharedId={taskSharedId} />\r\n          <GridItem xs={4}>\r\n            <Button\r\n              disabled={!taskSharedId}\r\n              color='primary'\r\n              onClick={() => dispatch(getSharedByTaskId(taskSharedId))}\r\n            >\r\n              Buscar Tareas compartidas\r\n            </Button>\r\n          </GridItem>\r\n        </GridContainer>        \r\n      </GridItem>\r\n      <GridItem xs={12} sm={12} md={10} style={{ margin: '0 auto' }}>\r\n        <Card>\r\n          <CardBody>          \r\n            <form onSubmit={handleShared}>              \r\n                {loadingSharedListByTaskId ? (\r\n                  <>Cargando porcentajes</>\r\n                ) : sharedListByTaskId && (               \r\n                  componentePorcentajes          \r\n                )}\r\n              {errorSharedRegister && (\r\n                <GridContainer>\r\n                  <GridItem xs={12}>\r\n                    <SnackbarContent message={errorSharedRegister} color='danger' />\r\n                  </GridItem>\r\n                </GridContainer>\r\n              )}\r\n              {sharedListByTaskId && (\r\n                <Button type='submit' color='primary' className={classes.registerButton}>\r\n                  {loadingSharedRegister ? 'Registrando porcentaje compartido...' : 'Registrar porcentaje'}\r\n                </Button>\r\n              )}\r\n            </form>\r\n          </CardBody>\r\n        </Card>\r\n      </GridItem>\r\n      {alert}\r\n    </GridContainer>\r\n  )  \r\n}\r\n\r\nexport default sharedRegister\r\n"]},"metadata":{},"sourceType":"module"}