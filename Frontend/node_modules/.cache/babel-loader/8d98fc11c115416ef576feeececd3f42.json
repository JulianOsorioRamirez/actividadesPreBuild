{"ast":null,"code":"import _slicedToArray from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\Catalog\\\\TaskOther\\\\RegisterTaskOtherScreen\\\\components\\\\DuplicateTaskExtOrdOtherList.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormControl, InputLabel, MenuItem, Select, Typography } from '@material-ui/core';\nimport { NavLink } from 'react-router-dom';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport SnackbarContent from 'components/Snackbar/SnackbarContent';\nimport GridItem from 'components/Grid/GridItem';\nimport TaskProfileForm from './TaskProfileForm';\nimport Button from 'components/CustomButtons/Button';\nimport { PROFILE_LIST_RESET } from 'redux/constants/profileConstants';\nimport { TASK_REGISTER_RESET, TASK_LIST_DUPLICATE_BY_PROFILE_CLEAN, TASK_LIST_BY_PROFILE_ID_RESET } from 'redux/constants/taskConstants';\nimport { getTasksByProfileId, registerTask } from 'redux/actions/taskActions';\nimport { fillAllTaskHandle } from 'redux/actions/taskActions';\nimport MultiSelectProfile from 'components/MultiSelectProfiles/MultiSelectProfiles';\nimport { getProfiles } from 'redux/actions/profileActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar DuplicateTaskExtOrdOtherList = function DuplicateTaskExtOrdOtherList(_ref) {\n  _s();\n\n  var id = _ref.id,\n      setTaskType = _ref.setTaskType;\n  var dispatch = useDispatch();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      profilesData = _useState2[0],\n      setProfilesData = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.profileList;\n  }),\n      successProfileList = _useSelector.successProfileList,\n      loadingProfileList = _useSelector.loadingProfileList,\n      profiles = _useSelector.profiles;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.handleDuplicateTask;\n  }),\n      createTask = _useSelector2.createTask,\n      sameTask = _useSelector2.sameTask;\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      alert = _useState4[0],\n      setAlert = _useState4[1];\n\n  var _useSelector3 = useSelector(function (state) {\n    return state.taskListByProfile;\n  }),\n      loadingTaskListByProfile = _useSelector3.loadingTaskListByProfile,\n      successTaskListByProfile = _useSelector3.successTaskListByProfile,\n      taskListByProfileData = _useSelector3.taskListByProfileData;\n\n  var _useSelector4 = useSelector(function (state) {\n    return state.taskRegister;\n  }),\n      loadingTaskRegister = _useSelector4.loadingTaskRegister,\n      successTaskRegister = _useSelector4.successTaskRegister,\n      errorTaskRegister = _useSelector4.errorTaskRegister;\n\n  useEffect(function () {\n    if (!successTaskListByProfile) {\n      dispatch(getTasksByProfileId(id));\n    }\n  }, [successTaskListByProfile]);\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: TASK_LIST_BY_PROFILE_ID_RESET\n      });\n    };\n  }, [dispatch]);\n  useEffect(function () {\n    if (taskListByProfileData) {\n      dispatch(fillAllTaskHandle(taskListByProfileData));\n    }\n  }, [taskListByProfileData]);\n  useEffect(function () {\n    if (!successProfileList) {\n      dispatch(getProfiles());\n    }\n  }, [successProfileList]);\n  useEffect(function () {\n    if (successTaskRegister) {\n      setAlert( /*#__PURE__*/_jsxDEV(SweetAlert, {\n        success: true,\n        style: {\n          display: 'block',\n          marginTop: '-100px'\n        },\n        title: \"Hecho!\",\n        onConfirm: function onConfirm() {\n          return confirmSuccess();\n        },\n        onCancel: function onCancel() {\n          return hideAlert();\n        },\n        children: \"Tarea/s guardada/s correctamente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, _this));\n    }\n  }, [successTaskRegister]);\n\n  var confirmSuccess = function confirmSuccess() {\n    setAlert(null);\n    dispatch({\n      type: PROFILE_LIST_RESET\n    });\n    dispatch({\n      type: TASK_REGISTER_RESET\n    });\n    setTaskType('');\n    dispatch({\n      type: TASK_LIST_BY_PROFILE_ID_RESET\n    });\n    dispatch({\n      type: TASK_LIST_DUPLICATE_BY_PROFILE_CLEAN\n    });\n  };\n\n  var hideAlert = function hideAlert() {\n    setAlert(null);\n  };\n\n  var handleChangeMultiData = function handleChangeMultiData(event) {\n    var value = event.target.value;\n\n    if (profilesData.map(function (profile) {\n      return profile.id_perfil;\n    }).indexOf(value[value.length - 1].id_perfil) === -1) {\n      setProfilesData(value);\n    } else {\n      setProfilesData(profilesData.filter(function (profile) {\n        var _value;\n\n        return profile.id_perfil !== ((_value = value[value.length - 1]) === null || _value === void 0 ? void 0 : _value.id_perfil);\n      }));\n    }\n  };\n\n  var handleData = function handleData(e) {\n    e.preventDefault();\n    var data = {\n      profilesData: profilesData,\n      createTask: createTask,\n      sameTask: sameTask\n    };\n    dispatch(registerTask(data));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loadingTaskListByProfile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Cargando tareas de perfil\"\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleData,\n      children: [/*#__PURE__*/_jsxDEV(GridItem, {\n        xs: 12,\n        style: {\n          marginTop: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Si marcas \\\"Crear tarea\\\" \\xE9sta se copiar\\xE1 en los perfiles seleccionados abajo, pero no tendr\\xE1 relaci\\xF3n con la tarea del perfil a duplicar. Si marcas \\\"Misma tarea\\\" \\xE9st\\xE1 ser\\xE1 la misma en el perfil a duplicar y en los seleccionados abajo y por tanto compartir\\xE1n la descripci\\xF3n y los atributos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, _this), taskListByProfileData && taskListByProfileData.map(function (taskProfile) {\n          return /*#__PURE__*/_jsxDEV(TaskProfileForm, {\n            taskByProfile: taskProfile\n          }, taskProfile.id_tarea, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }, _this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(GridItem, {\n        xs: 12,\n        style: {\n          marginTop: '15px'\n        },\n        children: loadingProfileList ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \"Cargando perfiles\"\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(MultiSelectProfile, {\n          label: 'Perfiles',\n          data: profiles === null || profiles === void 0 ? void 0 : profiles.filter(function (item) {\n            return item.id_perfil !== id;\n          }),\n          multiData: profilesData,\n          handleChangeMultiData: handleChangeMultiData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, _this), errorTaskRegister && /*#__PURE__*/_jsxDEV(GridItem, {\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(SnackbarContent, {\n          message: errorTaskRegister,\n          color: \"danger\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(GridItem, {\n        xs: 12,\n        style: {\n          textAlign: 'end'\n        },\n        children: [/*#__PURE__*/_jsxDEV(NavLink, {\n          to: '/admin/tasks-ord-ext-register',\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            onClick: confirmSuccess,\n            children: \"Cancelar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          color: successTaskRegister ? 'success' : 'primary',\n          type: \"submit\",\n          children: loadingTaskRegister ? 'Guardando' : successTaskRegister ? 'Guardado' : 'Guardar'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, _this), alert]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false);\n};\n\n_s(DuplicateTaskExtOrdOtherList, \"44N/5fI4vzg4WlSowcBhqcbWuJ0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = DuplicateTaskExtOrdOtherList;\nexport default DuplicateTaskExtOrdOtherList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DuplicateTaskExtOrdOtherList\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/src/screens/control-panel/Catalog/TaskOther/RegisterTaskOtherScreen/components/DuplicateTaskExtOrdOtherList.js"],"names":["useEffect","useState","useDispatch","useSelector","FormControl","InputLabel","MenuItem","Select","Typography","NavLink","SweetAlert","SnackbarContent","GridItem","TaskProfileForm","Button","PROFILE_LIST_RESET","TASK_REGISTER_RESET","TASK_LIST_DUPLICATE_BY_PROFILE_CLEAN","TASK_LIST_BY_PROFILE_ID_RESET","getTasksByProfileId","registerTask","fillAllTaskHandle","MultiSelectProfile","getProfiles","DuplicateTaskExtOrdOtherList","id","setTaskType","dispatch","profilesData","setProfilesData","state","profileList","successProfileList","loadingProfileList","profiles","handleDuplicateTask","createTask","sameTask","alert","setAlert","taskListByProfile","loadingTaskListByProfile","successTaskListByProfile","taskListByProfileData","taskRegister","loadingTaskRegister","successTaskRegister","errorTaskRegister","type","display","marginTop","confirmSuccess","hideAlert","handleChangeMultiData","event","value","target","map","profile","id_perfil","indexOf","length","filter","handleData","e","preventDefault","data","taskProfile","id_tarea","item","textAlign"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FormControl, InputLabel, MenuItem, Select, Typography } from '@material-ui/core'\r\nimport { NavLink } from 'react-router-dom'\r\nimport SweetAlert from 'react-bootstrap-sweetalert'\r\nimport SnackbarContent from 'components/Snackbar/SnackbarContent'\r\nimport GridItem from 'components/Grid/GridItem'\r\nimport TaskProfileForm from './TaskProfileForm'\r\nimport Button from 'components/CustomButtons/Button'\r\nimport { PROFILE_LIST_RESET } from 'redux/constants/profileConstants'\r\nimport { TASK_REGISTER_RESET, TASK_LIST_DUPLICATE_BY_PROFILE_CLEAN, TASK_LIST_BY_PROFILE_ID_RESET } from 'redux/constants/taskConstants'\r\nimport { getTasksByProfileId, registerTask } from 'redux/actions/taskActions'\r\nimport { fillAllTaskHandle } from 'redux/actions/taskActions'\r\nimport MultiSelectProfile from 'components/MultiSelectProfiles/MultiSelectProfiles'\r\nimport { getProfiles } from 'redux/actions/profileActions'\r\n\r\nconst DuplicateTaskExtOrdOtherList = ({ id, setTaskType }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const [profilesData, setProfilesData] = useState([])\r\n\r\n  const { successProfileList, loadingProfileList, profiles } = useSelector((state) => state.profileList)\r\n  const { createTask, sameTask } = useSelector((state) => state.handleDuplicateTask)\r\n  const [alert, setAlert] = useState(null)\r\n  const { loadingTaskListByProfile, successTaskListByProfile, taskListByProfileData } = useSelector(\r\n    (state) => state.taskListByProfile\r\n  )\r\n  const { loadingTaskRegister, successTaskRegister, errorTaskRegister } = useSelector((state) => state.taskRegister)\r\n\r\n  useEffect(() => {\r\n    if (!successTaskListByProfile) {\r\n      dispatch(getTasksByProfileId(id))\r\n    }\r\n  }, [successTaskListByProfile])\r\n\r\n  useEffect(() => {\r\n    return () => dispatch({ type: TASK_LIST_BY_PROFILE_ID_RESET })\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    if (taskListByProfileData) {\r\n      dispatch(fillAllTaskHandle(taskListByProfileData))\r\n    }\r\n  }, [taskListByProfileData])\r\n\r\n  useEffect(() => {\r\n    if (!successProfileList) {\r\n      dispatch(getProfiles())\r\n    }\r\n  }, [successProfileList])\r\n\r\n  useEffect(() => {\r\n    if (successTaskRegister) {\r\n      setAlert(        \r\n        <SweetAlert\r\n          success\r\n          style={{ display: 'block', marginTop: '-100px' }}\r\n          title='Hecho!'          \r\n          onConfirm={() => confirmSuccess()}\r\n          onCancel={() => hideAlert()}\r\n        >\r\n          Tarea/s guardada/s correctamente\r\n        </SweetAlert>\r\n      )\r\n    }\r\n  }, [successTaskRegister])\r\n\r\n  const confirmSuccess = () => {\r\n    setAlert(null)\r\n    dispatch({ type: PROFILE_LIST_RESET })\r\n    dispatch({ type: TASK_REGISTER_RESET })\r\n    setTaskType('')\r\n    dispatch({ type: TASK_LIST_BY_PROFILE_ID_RESET })\r\n    dispatch({ type: TASK_LIST_DUPLICATE_BY_PROFILE_CLEAN })    \r\n  }\r\n\r\n  const hideAlert = () => {\r\n    setAlert(null)\r\n  }\r\n\r\n  const handleChangeMultiData = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event\r\n    if (profilesData.map((profile) => profile.id_perfil).indexOf(value[value.length - 1].id_perfil) === -1) {\r\n      setProfilesData(value)\r\n    } else {\r\n      setProfilesData(profilesData.filter((profile) => profile.id_perfil !== value[value.length - 1]?.id_perfil))\r\n    }\r\n  }\r\n\r\n  const handleData = (e) => {\r\n    e.preventDefault()\r\n    const data = {\r\n      profilesData,\r\n      createTask,\r\n      sameTask,\r\n    }\r\n    dispatch(registerTask(data))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {loadingTaskListByProfile ? (\r\n        <>Cargando tareas de perfil</>\r\n      ) : (\r\n        <form onSubmit={handleData}>\r\n          <GridItem xs={12} style={{ marginTop: '15px' }}>\r\n            <Typography>\r\n               Si marcas \"Crear tarea\" ésta se copiará en los perfiles seleccionados abajo, pero no tendrá relación con la tarea del perfil a duplicar. Si marcas \"Misma tarea\" éstá será la misma en el perfil a duplicar y en los seleccionados abajo y por tanto compartirán la descripción y los atributos\r\n            </Typography>\r\n\r\n            {taskListByProfileData &&\r\n              taskListByProfileData.map((taskProfile) => (\r\n                <TaskProfileForm key={taskProfile.id_tarea} taskByProfile={taskProfile} />\r\n              ))}\r\n          </GridItem>\r\n          <GridItem xs={12} style={{ marginTop: '15px' }}>\r\n            {loadingProfileList ? (\r\n              <>Cargando perfiles</>\r\n            ) : (              \r\n              <MultiSelectProfile\r\n                label={'Perfiles'}\r\n                data={profiles?.filter((item) => item.id_perfil !== id)}\r\n                multiData={profilesData}\r\n                handleChangeMultiData={handleChangeMultiData}\r\n              />\r\n            )}\r\n          </GridItem>\r\n          {errorTaskRegister && (\r\n            <GridItem xs={12}>\r\n              <SnackbarContent message={errorTaskRegister} color='danger' />\r\n            </GridItem>\r\n          )}\r\n          <GridItem xs={12} style={{ textAlign: 'end' }}>\r\n            <NavLink to={'/admin/tasks-ord-ext-register'} >\r\n              <Button color='primary' onClick={confirmSuccess}>\r\n                 Cancelar\r\n              </Button>\r\n            </NavLink>\r\n                      \r\n            <Button color={successTaskRegister ? 'success' : 'primary'} type='submit'>\r\n              {loadingTaskRegister ? 'Guardando' : successTaskRegister ? 'Guardado' : 'Guardar'}\r\n            </Button>            \r\n          </GridItem>\r\n          {alert}\r\n        </form>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DuplicateTaskExtOrdOtherList\r\n"]},"metadata":{},"sourceType":"module"}