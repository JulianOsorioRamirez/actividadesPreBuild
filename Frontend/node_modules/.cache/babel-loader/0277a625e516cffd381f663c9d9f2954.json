{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _s = $RefreshSig$();\n\nimport { useLocation } from 'react-router-dom'; // this verifies if any of the collapses should be default opened on a rerender of this component\n\nexport var getCollapseInitialState = function getCollapseInitialState(routes) {\n  for (var i = 0; i < routes.length; i++) {\n    if (routes[i].collapse && getCollapseInitialState(routes[i].views)) {\n      return true;\n    } else if (location.pathname === routes[i].layout + routes[i].path) {\n      return true;\n    }\n  }\n\n  return false;\n}; // this creates the intial state of this component based on the collapse routes\n// that it gets through routes\n\nexport var getCollapseStates = function getCollapseStates(routes) {\n  var initialState = {};\n  routes.map(function (prop) {\n    if (prop.collapse) {\n      initialState = _objectSpread(_objectSpread(_defineProperty({}, prop.state, getCollapseInitialState(prop.views)), getCollapseStates(prop.views)), initialState);\n    }\n\n    return null;\n  });\n  return initialState;\n}; // verifies if routeName is the one active (in browser input)\n\nexport var activeRoute = function activeRoute(routeName) {\n  _s();\n\n  return useLocation().pathname === routeName ? 'active' : '';\n};\n\n_s(activeRoute, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n  return [useLocation];\n});","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/src/shared/mappers/routesMappers.js"],"names":["useLocation","getCollapseInitialState","routes","i","length","collapse","views","location","pathname","layout","path","getCollapseStates","initialState","map","prop","state","activeRoute","routeName"],"mappings":"AAAA;;;;;;;AAEA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;;AACA,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,MAAD,EAAY;AACjD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAAM,CAACE,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,QAAID,MAAM,CAACC,CAAD,CAAN,CAAUE,QAAV,IAAsBJ,uBAAuB,CAACC,MAAM,CAACC,CAAD,CAAN,CAAUG,KAAX,CAAjD,EAAoE;AAClE,aAAO,IAAP;AACD,KAFD,MAEO,IAAIC,QAAQ,CAACC,QAAT,KAAsBN,MAAM,CAACC,CAAD,CAAN,CAAUM,MAAV,GAAmBP,MAAM,CAACC,CAAD,CAAN,CAAUO,IAAvD,EAA6D;AAClE,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD,CATM,C,CAWP;AACA;;AACA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACT,MAAD,EAAY;AAC3C,MAAIU,YAAY,GAAG,EAAnB;AACAV,EAAAA,MAAM,CAACW,GAAP,CAAW,UAACC,IAAD,EAAU;AACnB,QAAIA,IAAI,CAACT,QAAT,EAAmB;AACjBO,MAAAA,YAAY,mDACTE,IAAI,CAACC,KADI,EACId,uBAAuB,CAACa,IAAI,CAACR,KAAN,CAD3B,GAEPK,iBAAiB,CAACG,IAAI,CAACR,KAAN,CAFV,GAGPM,YAHO,CAAZ;AAKD;;AACD,WAAO,IAAP;AACD,GATD;AAUA,SAAOA,YAAP;AACD,CAbM,C,CAeP;;AACA,OAAO,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD,EAAe;AAAA;;AACxC,SAAOjB,WAAW,GAAGQ,QAAd,KAA2BS,SAA3B,GAAuC,QAAvC,GAAkD,EAAzD;AACD,CAFM;;GAAMD,W;UACJhB,W","sourcesContent":["'use strict'\r\n\r\nimport { useLocation } from 'react-router-dom'\r\n\r\n// this verifies if any of the collapses should be default opened on a rerender of this component\r\nexport const getCollapseInitialState = (routes) => {\r\n  for (let i = 0; i < routes.length; i++) {\r\n    if (routes[i].collapse && getCollapseInitialState(routes[i].views)) {\r\n      return true\r\n    } else if (location.pathname === routes[i].layout + routes[i].path) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\n// this creates the intial state of this component based on the collapse routes\r\n// that it gets through routes\r\nexport const getCollapseStates = (routes) => {\r\n  let initialState = {}\r\n  routes.map((prop) => {\r\n    if (prop.collapse) {\r\n      initialState = {\r\n        [prop.state]: getCollapseInitialState(prop.views),\r\n        ...getCollapseStates(prop.views),\r\n        ...initialState,\r\n      }\r\n    }\r\n    return null\r\n  })\r\n  return initialState\r\n}\r\n\r\n// verifies if routeName is the one active (in browser input)\r\nexport const activeRoute = (routeName) => {\r\n  return useLocation().pathname === routeName ? 'active' : ''\r\n}\r\n"]},"metadata":{},"sourceType":"module"}