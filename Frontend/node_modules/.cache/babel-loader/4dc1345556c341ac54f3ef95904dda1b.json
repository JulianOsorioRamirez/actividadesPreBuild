{"ast":null,"code":"import _objectSpread from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\Catalog\\\\TaskShared\\\\TaskSharedListScreen\\\\components\\\\UpdateSharedModal.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport { Dialog, FormControl, FormControlLabel, InputLabel, makeStyles, MenuItem, Radio, RadioGroup, Select as Selectable } from '@material-ui/core';\nimport Card from 'components/Card/Card';\nimport CardBody from 'components/Card/CardBody';\nimport Button from 'components/CustomButtons/Button';\nimport GridContainer from 'components/Grid/GridContainer';\nimport CustomInput from 'components/CustomInput/CustomInput';\nimport GridItem from 'components/Grid/GridItem';\nimport SnackbarContent from 'components/Snackbar/SnackbarContent';\nimport { sharedUpdateInfo } from 'redux/actions/sharedActions';\nimport { SHARED_UPDATE_RESET } from 'redux/constants/sharedConstants';\nimport styles from '../styles/updateSharedModalStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(styles);\n\nvar UpdateSharedModal = function UpdateSharedModal(_ref) {\n  _s();\n\n  var handleCloseModal = _ref.handleCloseModal,\n      updateSharedModal = _ref.updateSharedModal,\n      showUpdateShared = _ref.showUpdateShared;\n  var dispatch = useDispatch();\n  var classes = useStyles();\n\n  var _useState = useState(showUpdateShared),\n      _useState2 = _slicedToArray(_useState, 2),\n      sharedInfo = _useState2[0],\n      setSharedInfo = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      alert = _useState4[0],\n      setAlert = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.sharedUpdate;\n  }),\n      loadingSharedUpdate = _useSelector.loadingSharedUpdate,\n      errorSharedUpdate = _useSelector.errorSharedUpdate,\n      successSharedUpdate = _useSelector.successSharedUpdate;\n\n  useEffect(function () {\n    if (successSharedUpdate) {\n      setAlert( /*#__PURE__*/_jsxDEV(SweetAlert, {\n        success: true,\n        style: {\n          display: 'block',\n          marginTop: '-100px'\n        },\n        title: \"HECHO!\",\n        onConfirm: function onConfirm() {\n          return confirmSuccess();\n        },\n        onCancel: function onCancel() {\n          return setAlert(null);\n        },\n        confirmBtnCssClass: classes.confirmBtnCssClass,\n        children: \"Tarea compartida actualizada correctamente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, _this));\n    }\n  }, [successSharedUpdate]);\n\n  var handleUpdate = function handleUpdate(e) {\n    e.preventDefault();\n    dispatch(sharedUpdateInfo(sharedInfo));\n  };\n\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: SHARED_UPDATE_RESET\n      });\n    };\n  }, [dispatch]);\n\n  var confirmSuccess = function confirmSuccess() {\n    dispatch({\n      type: SHARED_UPDATE_RESET\n    });\n    handleCloseModal();\n    setAlert(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Dialog, {\n      open: updateSharedModal,\n      keepMounted: true,\n      onClose: handleCloseModal,\n      \"aria-labelledby\": \"notice-modal-slide-title\",\n      \"aria-describedby\": \"notice-modal-slide-description\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleUpdate,\n            children: /*#__PURE__*/_jsxDEV(GridContainer, {\n              children: [/*#__PURE__*/_jsxDEV(GridItem, {\n                xs: 12,\n                md: 12,\n                children: /*#__PURE__*/_jsxDEV(CustomInput, {\n                  labelText: 'Tarea',\n                  id: \"tarea\",\n                  formControlProps: {\n                    fullWidth: true\n                  },\n                  inputProps: {\n                    value: sharedInfo.descripcion_tarea,\n                    type: 'text',\n                    disabled: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 19\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 15\n              }, _this), /*#__PURE__*/_jsxDEV(GridItem, {\n                xs: 12,\n                md: 12,\n                children: /*#__PURE__*/_jsxDEV(CustomInput, {\n                  labelText: 'Puesto',\n                  id: \"puesto\",\n                  formControlProps: {\n                    fullWidth: true\n                  },\n                  inputProps: {\n                    value: \"\".concat(sharedInfo.nombre, \" \").concat(sharedInfo.apellido1, \" \").concat((sharedInfo === null || sharedInfo === void 0 ? void 0 : sharedInfo.apellido2) || ''),\n                    type: 'text',\n                    disabled: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 19\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(GridItem, {\n                xs: 12,\n                md: 6,\n                children: /*#__PURE__*/_jsxDEV(CustomInput, {\n                  labelText: 'Porcentaje de responsabilidad',\n                  id: \"porcentaje\",\n                  formControlProps: {\n                    fullWidth: true\n                  },\n                  inputProps: {\n                    value: sharedInfo === null || sharedInfo === void 0 ? void 0 : sharedInfo.porcentaje_responsabilidad,\n                    onChange: function onChange(e) {\n                      return setSharedInfo(_objectSpread(_objectSpread({}, sharedInfo), {}, {\n                        porcentaje_responsabilidad: e.target.value\n                      }));\n                    },\n                    type: 'number',\n                    required: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 19\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(GridItem, {\n                xs: 12,\n                style: {\n                  margin: '20px 0 0',\n                  display: 'flex',\n                  justifyContent: 'space-around'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  color: \"secondary\",\n                  onClick: handleCloseModal,\n                  children: \"Cerrar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  color: \"primary\",\n                  children: loadingSharedUpdate ? 'Actualizando...' : 'Actualizar tarea compartida'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 19\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 17\n              }, _this), errorSharedUpdate && /*#__PURE__*/_jsxDEV(GridItem, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(SnackbarContent, {\n                  message: errorSharedUpdate,\n                  color: \"danger\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 21\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 19\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, _this), alert]\n  }, void 0, true);\n};\n\n_s(UpdateSharedModal, \"x88kDS4h+En2BiHwvz/ds45zWlw=\", false, function () {\n  return [useDispatch, useStyles, useSelector];\n});\n\n_c = UpdateSharedModal;\nexport default UpdateSharedModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateSharedModal\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/src/screens/control-panel/Catalog/TaskShared/TaskSharedListScreen/components/UpdateSharedModal.js"],"names":["useState","useEffect","useSelector","useDispatch","SweetAlert","Dialog","FormControl","FormControlLabel","InputLabel","makeStyles","MenuItem","Radio","RadioGroup","Select","Selectable","Card","CardBody","Button","GridContainer","CustomInput","GridItem","SnackbarContent","sharedUpdateInfo","SHARED_UPDATE_RESET","styles","useStyles","UpdateSharedModal","handleCloseModal","updateSharedModal","showUpdateShared","dispatch","classes","sharedInfo","setSharedInfo","alert","setAlert","state","sharedUpdate","loadingSharedUpdate","errorSharedUpdate","successSharedUpdate","display","marginTop","confirmSuccess","confirmBtnCssClass","handleUpdate","e","preventDefault","type","fullWidth","value","descripcion_tarea","disabled","nombre","apellido1","apellido2","porcentaje_responsabilidad","onChange","target","required","margin","justifyContent"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport SweetAlert from 'react-bootstrap-sweetalert'\r\nimport {\r\n  Dialog,\r\n  FormControl,\r\n  FormControlLabel,\r\n  InputLabel,\r\n  makeStyles,\r\n  MenuItem,\r\n  Radio,\r\n  RadioGroup,\r\n  Select as Selectable,\r\n} from '@material-ui/core'\r\nimport Card from 'components/Card/Card'\r\nimport CardBody from 'components/Card/CardBody'\r\nimport Button from 'components/CustomButtons/Button'\r\nimport GridContainer from 'components/Grid/GridContainer'\r\nimport CustomInput from 'components/CustomInput/CustomInput'\r\nimport GridItem from 'components/Grid/GridItem'\r\nimport SnackbarContent from 'components/Snackbar/SnackbarContent'\r\nimport { sharedUpdateInfo } from 'redux/actions/sharedActions'\r\nimport { SHARED_UPDATE_RESET } from 'redux/constants/sharedConstants'\r\nimport styles from '../styles/updateSharedModalStyles'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nconst UpdateSharedModal = ({ handleCloseModal, updateSharedModal, showUpdateShared }) => {\r\n  const dispatch = useDispatch()\r\n  const classes = useStyles()\r\n  const [sharedInfo, setSharedInfo] = useState(showUpdateShared)\r\n\r\n  const [alert, setAlert] = useState(null)\r\n  const { loadingSharedUpdate, errorSharedUpdate, successSharedUpdate } = useSelector((state) => state.sharedUpdate)\r\n\r\n  useEffect(() => {\r\n    if (successSharedUpdate) {\r\n      setAlert(\r\n        <SweetAlert\r\n          success\r\n          style={{ display: 'block', marginTop: '-100px' }}\r\n          title='HECHO!'\r\n          onConfirm={() => confirmSuccess()}\r\n          onCancel={() => setAlert(null)}\r\n          confirmBtnCssClass={classes.confirmBtnCssClass}\r\n        >\r\n          Tarea compartida actualizada correctamente\r\n        </SweetAlert>\r\n      )\r\n    }\r\n  }, [successSharedUpdate])\r\n\r\n  const handleUpdate = (e) => {\r\n    e.preventDefault()\r\n    dispatch(sharedUpdateInfo(sharedInfo))\r\n  }\r\n\r\n  useEffect(() => {\r\n    return () => dispatch({ type: SHARED_UPDATE_RESET })\r\n  }, [dispatch])\r\n\r\n  const confirmSuccess = () => {\r\n    dispatch({ type: SHARED_UPDATE_RESET })\r\n    handleCloseModal()\r\n    setAlert(null)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Dialog\r\n        open={updateSharedModal}\r\n        keepMounted\r\n        onClose={handleCloseModal}\r\n        aria-labelledby='notice-modal-slide-title'\r\n        aria-describedby='notice-modal-slide-description'\r\n      >\r\n        <Card>\r\n          <CardBody>\r\n            <form onSubmit={handleUpdate}>\r\n              <GridContainer>\r\n              <GridItem xs={12} md={12}>\r\n                  <CustomInput\r\n                    labelText={'Tarea'}\r\n                    id='tarea'\r\n                    formControlProps={{\r\n                      fullWidth: true,\r\n                    }}\r\n                    inputProps={{\r\n                      value: sharedInfo.descripcion_tarea,\r\n                      type: 'text',\r\n                      disabled: true,\r\n                    }}\r\n                  />\r\n                </GridItem>\r\n                <GridItem xs={12} md={12}>\r\n                  <CustomInput\r\n                    labelText={'Puesto'}\r\n                    id='puesto'\r\n                    formControlProps={{\r\n                      fullWidth: true,\r\n                    }}\r\n                    inputProps={{\r\n                      value: `${sharedInfo.nombre} ${sharedInfo.apellido1} ${sharedInfo?.apellido2 || ''}`,\r\n                      type: 'text',\r\n                      disabled: true,\r\n                    }}\r\n                  />\r\n                </GridItem>\r\n                <GridItem xs={12} md={6}>\r\n                  <CustomInput\r\n                    labelText={'Porcentaje de responsabilidad'}\r\n                    id='porcentaje'\r\n                    formControlProps={{\r\n                      fullWidth: true,\r\n                    }}\r\n                    inputProps={{\r\n                      value: sharedInfo?.porcentaje_responsabilidad,\r\n                      onChange: (e) => setSharedInfo({ ...sharedInfo, porcentaje_responsabilidad: e.target.value }),\r\n                      type: 'number',\r\n                      required: true,\r\n                    }}\r\n                  />\r\n                </GridItem>                \r\n                <GridItem xs={12} style={{ margin: '20px 0 0', display: 'flex', justifyContent: 'space-around' }}>\r\n                  <Button color='secondary' onClick={handleCloseModal}>\r\n                    Cerrar\r\n                  </Button>\r\n                  <Button type='submit' color='primary'>\r\n                    {loadingSharedUpdate ? 'Actualizando...' : 'Actualizar tarea compartida'}\r\n                  </Button>\r\n                </GridItem>\r\n                {errorSharedUpdate && (\r\n                  <GridItem xs={12}>\r\n                    <SnackbarContent message={errorSharedUpdate} color='danger' />\r\n                  </GridItem>\r\n                )}\r\n              </GridContainer>\r\n            </form>\r\n          </CardBody>\r\n        </Card>\r\n      </Dialog>\r\n      {alert}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UpdateSharedModal\r\n"]},"metadata":{},"sourceType":"module"}