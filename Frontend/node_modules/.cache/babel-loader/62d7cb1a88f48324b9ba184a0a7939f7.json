{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\PruebaDespliegueAzure\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\AcumulativesTasks\\\\AcumulativesTasksRegisterScreen\\\\components\\\\TasksAcumulativesSelect.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormControl, InputLabel, makeStyles, MenuItem, Select as Selectable } from '@material-ui/core';\nimport GridItem from 'components/Grid/GridItem';\nimport { getAcumulativesTasks } from 'redux/actions/acumulativesActions';\nimport { ACUMULATIVES_TO_MANAGER_LIST_RESET } from 'redux/constants/acumulativesConstants';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar TasksAcumulativesSelect = function TasksAcumulativesSelect(_ref) {\n  _s();\n\n  var setTaskAcumulativesId = _ref.setTaskAcumulativesId,\n      taskAcumulativesId = _ref.taskAcumulativesId;\n  var dispatch = useDispatch();\n  var classes = {};\n\n  var _useSelector = useSelector(function (state) {\n    return state.acumulativesTasksSelect;\n  }),\n      loadingAcumulativesTasksSelect = _useSelector.loadingAcumulativesTasksSelect,\n      successAcumulativesTasksSelect = _useSelector.successAcumulativesTasksSelect,\n      acumulativesTasksSelect = _useSelector.acumulativesTasksSelect;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.userLogin;\n  }),\n      userInfo = _useSelector2.userInfo;\n\n  useEffect(function () {\n    if (!successAcumulativesTasksSelect) {\n      dispatch(getAcumulativesTasks(userInfo.id_puesto));\n    }\n  }, [successAcumulativesTasksSelect]);\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: ACUMULATIVES_TO_MANAGER_LIST_RESET\n      });\n    };\n  }, [dispatch]);\n\n  var isEmpty = function isEmpty(arr) {\n    return arr && arr.length <= 0;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loadingAcumulativesTasksSelect ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Cargando\"\n    }, void 0, false) : acumulativesTasksSelect && /*#__PURE__*/_jsxDEV(GridItem, {\n      xs: 12,\n      md: 6,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          htmlFor: \"register-acumulatives\",\n          children: isEmpty(acumulativesTasksSelect === null || acumulativesTasksSelect === void 0 ? void 0 : acumulativesTasksSelect.tasks) ? 'No hay Tareas acumulativas para seleccionar' : 'Tareas acumulativas*'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(Selectable, {\n          MenuProps: {\n            className: classes.selectMenu\n          },\n          className: classes.select,\n          value: taskAcumulativesId,\n          onChange: function onChange(e) {\n            setTaskAcumulativesId(e.target.value);\n          },\n          disabled: isEmpty(acumulativesTasksSelect === null || acumulativesTasksSelect === void 0 ? void 0 : acumulativesTasksSelect.tasks),\n          inputProps: {\n            name: 'register-acumulatives',\n            id: 'register-acumulatives'\n          },\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            classes: {\n              root: classes.selectMenuItem\n            },\n            disabled: true,\n            children: \"Selecciona una\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, _this), acumulativesTasksSelect.map(function (taskEntry, index) {\n            return /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: taskEntry.id_tarea,\n              classes: {\n                root: classes.selectMenuItem,\n                selected: classes.selectMenuItemSelected\n              },\n              children: \"TAREA: \".concat(taskEntry.descripcion_tarea, \" PERFIL: \").concat(taskEntry.codigo_perfil)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 19\n            }, _this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, _this)\n  }, void 0, false);\n};\n\n_s(TasksAcumulativesSelect, \"3hiRYr1cTsJdVK/TyjkGJgzBq/E=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = TasksAcumulativesSelect;\nexport default TasksAcumulativesSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksAcumulativesSelect\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/PruebaDespliegueAzure/Frontend/src/screens/control-panel/AcumulativesTasks/AcumulativesTasksRegisterScreen/components/TasksAcumulativesSelect.js"],"names":["useEffect","useDispatch","useSelector","FormControl","InputLabel","makeStyles","MenuItem","Select","Selectable","GridItem","getAcumulativesTasks","ACUMULATIVES_TO_MANAGER_LIST_RESET","TasksAcumulativesSelect","setTaskAcumulativesId","taskAcumulativesId","dispatch","classes","state","acumulativesTasksSelect","loadingAcumulativesTasksSelect","successAcumulativesTasksSelect","userLogin","userInfo","id_puesto","type","isEmpty","arr","length","tasks","className","selectMenu","select","e","target","value","name","id","root","selectMenuItem","map","taskEntry","index","id_tarea","selected","selectMenuItemSelected","descripcion_tarea","codigo_perfil"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FormControl, InputLabel, makeStyles, MenuItem, Select as Selectable } from '@material-ui/core'\r\nimport GridItem from 'components/Grid/GridItem'\r\nimport { getAcumulativesTasks } from 'redux/actions/acumulativesActions'\r\nimport { ACUMULATIVES_TO_MANAGER_LIST_RESET } from 'redux/constants/acumulativesConstants'\r\n\r\nconst TasksAcumulativesSelect = ({ setTaskAcumulativesId, taskAcumulativesId }) => {\r\n  const dispatch = useDispatch()\r\n  const classes = {}\r\n\r\n  const { loadingAcumulativesTasksSelect, successAcumulativesTasksSelect, acumulativesTasksSelect } = useSelector((state) => state.acumulativesTasksSelect)\r\n\r\n  const { userInfo } = useSelector((state) => state.userLogin)\r\n\r\n  useEffect(() => {\r\n    if (!successAcumulativesTasksSelect) {\r\n      dispatch(getAcumulativesTasks(userInfo.id_puesto))\r\n    }\r\n  }, [successAcumulativesTasksSelect])\r\n\r\n  useEffect(() => {\r\n    return () => dispatch({ type: ACUMULATIVES_TO_MANAGER_LIST_RESET })\r\n  }, [dispatch])\r\n\r\n  const isEmpty = (arr) => arr && arr.length <= 0\r\n  \r\n  return (\r\n    <>\r\n      {loadingAcumulativesTasksSelect ? (\r\n        <>Cargando</>\r\n      ) : (\r\n        acumulativesTasksSelect && (\r\n          <GridItem xs={12} md={6}>\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor='register-acumulatives'>\r\n                {isEmpty(acumulativesTasksSelect?.tasks) ? 'No hay Tareas acumulativas para seleccionar' : 'Tareas acumulativas*'}\r\n              </InputLabel>\r\n              <Selectable\r\n                MenuProps={{\r\n                  className: classes.selectMenu,\r\n                }}\r\n                className={classes.select}\r\n                value={taskAcumulativesId}\r\n                onChange={(e) => {\r\n                  setTaskAcumulativesId(e.target.value)\r\n                }}\r\n                disabled={isEmpty(acumulativesTasksSelect?.tasks)}\r\n                inputProps={{\r\n                  name: 'register-acumulatives',\r\n                  id: 'register-acumulatives',\r\n                }}\r\n              >\r\n                <MenuItem\r\n                  classes={{\r\n                    root: classes.selectMenuItem,\r\n                  }}\r\n                  disabled\r\n                >\r\n                  Selecciona una\r\n                </MenuItem>\r\n                {acumulativesTasksSelect.map((taskEntry, index) => (\r\n                  <MenuItem\r\n                    value={taskEntry.id_tarea}\r\n                    key={index}\r\n                    classes={{ root: classes.selectMenuItem, selected: classes.selectMenuItemSelected }}\r\n                  >\r\n                    {`TAREA: ${taskEntry.descripcion_tarea} PERFIL: ${taskEntry.codigo_perfil}`}\r\n                  </MenuItem>\r\n                ))}\r\n              </Selectable>\r\n            </FormControl>\r\n          </GridItem>\r\n        )\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TasksAcumulativesSelect\r\n"]},"metadata":{},"sourceType":"module"}