{"ast":null,"code":"import _slicedToArray from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\CodigoFuente\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\DashboardScreen\\\\components\\\\ProfileMultiSelect.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core';\nimport GridItem from 'components/Grid/GridItem';\nimport MultiSelectJobPosition from 'components/MultiSelectProfiles/MultiSelectProfiles';\nimport { PROFILE_LIST_RESET } from 'redux/constants/profileConstants';\nimport { getProfiles, getProfilesByPosition } from 'redux/actions/profileActions';\nimport styles from '../styles/multiSelectStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(styles);\n\nvar ProfileMultiSelect = function ProfileMultiSelect(_ref) {\n  _s();\n\n  var profilesData = _ref.profilesData,\n      setProfilesData = _ref.setProfilesData,\n      _ref$byPosition = _ref.byPosition,\n      byPosition = _ref$byPosition === void 0 ? false : _ref$byPosition;\n  var classes = useStyles();\n  var dispatch = useDispatch();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.profileList;\n  }),\n      successProfileList = _useSelector.successProfileList,\n      loadingProfileList = _useSelector.loadingProfileList,\n      profiles = _useSelector.profiles,\n      errorProfileList = _useSelector.errorProfileList;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.profileByPositionList;\n  }),\n      successProfileByPositionList = _useSelector2.successProfileByPositionList,\n      loadingProfileByPositionList = _useSelector2.loadingProfileByPositionList,\n      profilesByPosition = _useSelector2.profilesByPosition,\n      errorProfileByPositionList = _useSelector2.errorProfileByPositionList;\n\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: PROFILE_LIST_RESET\n      });\n    };\n  }, [dispatch]);\n  useEffect(function () {\n    if (byPosition) return;\n\n    if (!successProfileList) {\n      dispatch(getProfiles());\n    } else {\n      var filteredProfiles = profiles.filter(function (p) {\n        return p.activo === 'SI';\n      });\n      setData(filteredProfiles);\n    }\n  }, [successProfileList]);\n  useEffect(function () {\n    if (!byPosition) return;\n\n    if (!successProfileByPositionList) {\n      dispatch(getProfilesByPosition());\n    } else {\n      var filteredProfiles = profilesByPosition.filter(function (p) {\n        return p.activo === 'SI';\n      });\n      setData(filteredProfiles);\n    }\n  }, [successProfileByPositionList]);\n\n  var handleChangeMultiData = function handleChangeMultiData(event) {\n    var value = event.target.value;\n\n    if (profilesData.map(function (profile) {\n      return profile.id_perfil;\n    }).indexOf(value[value.length - 1].id_perfil) === -1) {\n      setProfilesData(value);\n    } else {\n      setProfilesData(profilesData.filter(function (profile) {\n        var _value;\n\n        return profile.id_perfil !== ((_value = value[value.length - 1]) === null || _value === void 0 ? void 0 : _value.id_perfil);\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(GridItem, {\n    xs: 12,\n    children: /*#__PURE__*/_jsxDEV(MultiSelectJobPosition, {\n      label: 'Perfiles',\n      data: data,\n      multiData: profilesData,\n      handleChangeMultiData: handleChangeMultiData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(ProfileMultiSelect, \"2mFMh6V8GZa8NcWNLNXoQD9Ur+s=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = ProfileMultiSelect;\nexport default ProfileMultiSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileMultiSelect\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/src/screens/control-panel/DashboardScreen/components/ProfileMultiSelect.js"],"names":["useState","useEffect","useDispatch","useSelector","makeStyles","GridItem","MultiSelectJobPosition","PROFILE_LIST_RESET","getProfiles","getProfilesByPosition","styles","useStyles","ProfileMultiSelect","profilesData","setProfilesData","byPosition","classes","dispatch","data","setData","state","profileList","successProfileList","loadingProfileList","profiles","errorProfileList","profileByPositionList","successProfileByPositionList","loadingProfileByPositionList","profilesByPosition","errorProfileByPositionList","type","filteredProfiles","filter","p","activo","handleChangeMultiData","event","value","target","map","profile","id_perfil","indexOf","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport GridItem from 'components/Grid/GridItem'\r\nimport MultiSelectJobPosition from 'components/MultiSelectProfiles/MultiSelectProfiles'\r\nimport { PROFILE_LIST_RESET } from 'redux/constants/profileConstants'\r\nimport { getProfiles, getProfilesByPosition } from 'redux/actions/profileActions'\r\nimport styles from '../styles/multiSelectStyles'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nconst ProfileMultiSelect = ({ profilesData, setProfilesData, byPosition = false }) => {\r\n   const classes = useStyles()\r\n   const dispatch = useDispatch()\r\n   const [data, setData] = useState([])\r\n\r\n   const { successProfileList, loadingProfileList, profiles, errorProfileList } = useSelector(\r\n      (state) => state.profileList\r\n   )\r\n\r\n   const { successProfileByPositionList, loadingProfileByPositionList, profilesByPosition, errorProfileByPositionList } = useSelector(\r\n      (state) => state.profileByPositionList\r\n   )\r\n\r\n   useEffect(() => {\r\n      return () => dispatch({ type: PROFILE_LIST_RESET })\r\n   }, [dispatch])\r\n\r\n   useEffect(() => {\r\n      if ( byPosition ) return\r\n\r\n      if (!successProfileList) {\r\n         dispatch(getProfiles())\r\n      } else {\r\n         const filteredProfiles = profiles.filter((p) => p.activo === 'SI')\r\n         setData(filteredProfiles)\r\n      }\r\n   }, [successProfileList])\r\n\r\n   useEffect(() => {\r\n      if ( !byPosition ) return\r\n\r\n      if (!successProfileByPositionList) {\r\n         dispatch(getProfilesByPosition())\r\n      } else {\r\n         const filteredProfiles = profilesByPosition.filter((p) => p.activo === 'SI')\r\n         setData(filteredProfiles)\r\n      }\r\n   }, [successProfileByPositionList])\r\n\r\n   const handleChangeMultiData = (event) => {\r\n      const {\r\n         target: { value },\r\n      } = event\r\n      if (profilesData.map((profile) => profile.id_perfil).indexOf(value[value.length - 1].id_perfil) === -1) {\r\n         setProfilesData(value)\r\n      } else {\r\n         setProfilesData(profilesData.filter((profile) => profile.id_perfil !== value[value.length - 1]?.id_perfil))\r\n      }\r\n   }\r\n\r\n\r\n   return (\r\n      <GridItem xs={12}>\r\n         <MultiSelectJobPosition\r\n         label={'Perfiles'}\r\n         data={data}\r\n         multiData={profilesData}\r\n         handleChangeMultiData={handleChangeMultiData}\r\n         />\r\n      </GridItem>\r\n   )\r\n}\r\n\r\nexport default ProfileMultiSelect\r\n"]},"metadata":{},"sourceType":"module"}