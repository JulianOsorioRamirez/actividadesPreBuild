{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\AsignDificultiesScreen\\\\AsignDificultiesRegister\\\\components\\\\TaskDificultiesSelect.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormControl, InputLabel, makeStyles, MenuItem, Select as Selectable } from '@material-ui/core';\nimport GridItem from 'components/Grid/GridItem';\nimport { getTasksDificulties } from 'redux/actions/difficultiesManagerActions';\nimport { DIFFICULTIES_TO_MANAGER_LIST_RESET } from 'redux/constants/difficultiesManagerConstants';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar TaskDificultiesSelect = function TaskDificultiesSelect(_ref) {\n  _s();\n\n  var setTaskDificultyId = _ref.setTaskDificultyId,\n      taskDificultyId = _ref.taskDificultyId;\n  var dispatch = useDispatch();\n  var classes = {};\n\n  var _useSelector = useSelector(function (state) {\n    return state.difficultiesToManagerList;\n  }),\n      loadingDifficultiesToManagerList = _useSelector.loadingDifficultiesToManagerList,\n      successDifficultiesToManagerList = _useSelector.successDifficultiesToManagerList,\n      difficultiesToManagerList = _useSelector.difficultiesToManagerList;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.userLogin;\n  }),\n      userInfo = _useSelector2.userInfo;\n\n  useEffect(function () {\n    if (!successDifficultiesToManagerList) {\n      dispatch(getTasksDificulties(userInfo.id_puesto));\n    }\n  }, [successDifficultiesToManagerList]);\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: DIFFICULTIES_TO_MANAGER_LIST_RESET\n      });\n    };\n  }, [dispatch]);\n\n  var isEmpty = function isEmpty(arr) {\n    return arr && arr.length <= 0;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loadingDifficultiesToManagerList ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Cargando\"\n    }, void 0, false) : difficultiesToManagerList && /*#__PURE__*/_jsxDEV(GridItem, {\n      xs: 12,\n      md: 6,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          htmlFor: \"register-difulty\",\n          children: isEmpty(difficultiesToManagerList) ? 'No hay Tareas para seleccionar' : 'Tareas *'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(Selectable, {\n          MenuProps: {\n            className: classes.selectMenu\n          },\n          className: classes.select,\n          value: taskDificultyId,\n          onChange: function onChange(e) {\n            setTaskDificultyId(e.target.value);\n          },\n          disabled: isEmpty(difficultiesToManagerList),\n          inputProps: {\n            name: 'register-entry',\n            id: 'register-entry'\n          },\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            classes: {\n              root: classes.selectMenuItem\n            },\n            disabled: true,\n            children: \"Selecciona una\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, _this), difficultiesToManagerList && difficultiesToManagerList.map(function (taskDificulty, index) {\n            return /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: taskDificulty.id_tarea,\n              classes: {\n                root: classes.selectMenuItem,\n                selected: classes.selectMenuItemSelected\n              },\n              children: \"TAREA: \".concat(taskDificulty.descripcion_tarea, \" PERFIL: \").concat(taskDificulty.codigo_perfil)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, _this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }, _this)\n  }, void 0, false);\n};\n\n_s(TaskDificultiesSelect, \"OXIMwi12q724+lJ/ZM7+qBQe9So=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = TaskDificultiesSelect;\nexport default TaskDificultiesSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskDificultiesSelect\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/src/screens/control-panel/AsignDificultiesScreen/AsignDificultiesRegister/components/TaskDificultiesSelect.js"],"names":["useEffect","useDispatch","useSelector","FormControl","InputLabel","makeStyles","MenuItem","Select","Selectable","GridItem","getTasksDificulties","DIFFICULTIES_TO_MANAGER_LIST_RESET","TaskDificultiesSelect","setTaskDificultyId","taskDificultyId","dispatch","classes","state","difficultiesToManagerList","loadingDifficultiesToManagerList","successDifficultiesToManagerList","userLogin","userInfo","id_puesto","type","isEmpty","arr","length","className","selectMenu","select","e","target","value","name","id","root","selectMenuItem","map","taskDificulty","index","id_tarea","selected","selectMenuItemSelected","descripcion_tarea","codigo_perfil"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FormControl, InputLabel, makeStyles, MenuItem, Select as Selectable } from '@material-ui/core'\r\nimport GridItem from 'components/Grid/GridItem'\r\nimport { getTasksDificulties } from 'redux/actions/difficultiesManagerActions'\r\nimport { DIFFICULTIES_TO_MANAGER_LIST_RESET } from 'redux/constants/difficultiesManagerConstants'\r\n\r\nconst TaskDificultiesSelect = ({ setTaskDificultyId, taskDificultyId }) => {\r\n  const dispatch = useDispatch()\r\n  const classes = {}\r\n\r\n  const { loadingDifficultiesToManagerList, successDifficultiesToManagerList, difficultiesToManagerList } = useSelector(\r\n    (state) => state.difficultiesToManagerList\r\n  )\r\n  const { userInfo } = useSelector((state) => state.userLogin)\r\n\r\n  useEffect(() => {\r\n    if (!successDifficultiesToManagerList) {\r\n      dispatch(getTasksDificulties(userInfo.id_puesto))\r\n    }\r\n  }, [successDifficultiesToManagerList])\r\n\r\n  useEffect(() => {\r\n    return () => dispatch({ type: DIFFICULTIES_TO_MANAGER_LIST_RESET })\r\n  }, [dispatch])\r\n\r\n  const isEmpty = (arr) => arr && arr.length <= 0\r\n\r\n  return (\r\n    <>\r\n      {loadingDifficultiesToManagerList ? (\r\n        <>Cargando</>\r\n      ) : (\r\n        difficultiesToManagerList && (\r\n          <GridItem xs={12} md={6}>\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor='register-difulty'>\r\n                {isEmpty(difficultiesToManagerList) ? 'No hay Tareas para seleccionar' : 'Tareas *'}\r\n              </InputLabel>\r\n              <Selectable\r\n                MenuProps={{\r\n                  className: classes.selectMenu,\r\n                }}\r\n                className={classes.select}\r\n                value={taskDificultyId}\r\n                onChange={(e) => {\r\n                  setTaskDificultyId(e.target.value)\r\n                }}\r\n                disabled={isEmpty(difficultiesToManagerList)}\r\n                inputProps={{\r\n                  name: 'register-entry',\r\n                  id: 'register-entry',\r\n                }}\r\n              >\r\n                <MenuItem\r\n                  classes={{\r\n                    root: classes.selectMenuItem,\r\n                  }}\r\n                  disabled\r\n                >\r\n                  Selecciona una\r\n                </MenuItem>\r\n                {difficultiesToManagerList && difficultiesToManagerList.map((taskDificulty, index) => (\r\n                  <MenuItem\r\n                    value={taskDificulty.id_tarea}\r\n                    key={index}\r\n                    classes={{ root: classes.selectMenuItem, selected: classes.selectMenuItemSelected }}\r\n                  >\r\n                    {`TAREA: ${taskDificulty.descripcion_tarea} PERFIL: ${taskDificulty.codigo_perfil}`}\r\n                  </MenuItem>\r\n                ))}\r\n              </Selectable>\r\n            </FormControl>\r\n          </GridItem>\r\n        )\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TaskDificultiesSelect\r\n"]},"metadata":{},"sourceType":"module"}