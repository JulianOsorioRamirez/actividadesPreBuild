{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/PruebaDespliegueAzure/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/PruebaDespliegueAzure/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { SHARED_REGISTER_REQUEST, SHARED_REGISTER_SUCCESS, SHARED_REGISTER_FAIL, SHARED_LIST_REQUEST, SHARED_LIST_SUCCESS, SHARED_LIST_FAIL, SHARED_UPDATE_SUCCESS, SHARED_UPDATE_REQUEST, SHARED_UPDATE_FAIL, SHARED_DELETE_FAIL, SHARED_DELETE_REQUEST, SHARED_DELETE_SUCCESS, SHARED_LIST_BY_TASK_ID_REQUEST, SHARED_LIST_BY_TASK_ID_SUCCESS, SHARED_LIST_BY_TASK_ID_FAIL, SHARED_TO_MANAGER_LIST_REQUEST, SHARED_TO_MANAGER_LIST_SUCCESS, SHARED_TO_MANAGER_LIST_FAIL } from '../constants/sharedConstants';\nexport var registerShared = function registerShared(shared) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, getState) {\n      var _getState, userInfo, config, _yield$axios$post, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              dispatch({\n                type: SHARED_REGISTER_REQUEST\n              });\n              _getState = getState(), userInfo = _getState.userLogin.userInfo;\n              config = {\n                headers: {\n                  Authorization: \"Bearer \".concat(userInfo.token),\n                  'Cache-Control': 'no-cache'\n                }\n              };\n              _context.next = 6;\n              return axios.post('/api/compartidas', shared, config);\n\n            case 6:\n              _yield$axios$post = _context.sent;\n              data = _yield$axios$post.data;\n              dispatch({\n                type: SHARED_REGISTER_SUCCESS,\n                payload: data\n              });\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              dispatch({\n                type: SHARED_REGISTER_FAIL,\n                payload: _context.t0.response && _context.t0.response.data.message ? _context.t0.response.data.message : _context.t0.message\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var getSharedList = function getSharedList() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n      var _getState2, userInfo, config, _yield$axios$get, data;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              dispatch({\n                type: SHARED_LIST_REQUEST\n              });\n              _getState2 = getState(), userInfo = _getState2.userLogin.userInfo;\n              config = {\n                headers: {\n                  Authorization: \"Bearer \".concat(userInfo.token),\n                  'Cache-Control': 'no-cache'\n                }\n              };\n              _context2.next = 6;\n              return axios.get('/api/compartidas', config);\n\n            case 6:\n              _yield$axios$get = _context2.sent;\n              data = _yield$axios$get.data;\n              dispatch({\n                type: SHARED_LIST_SUCCESS,\n                payload: data\n              });\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](0);\n              dispatch({\n                type: SHARED_LIST_FAIL,\n                payload: _context2.t0.response && _context2.t0.response.data.message ? _context2.t0.response.data.message : _context2.t0.message\n              });\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 11]]);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var sharedUpdateInfo = function sharedUpdateInfo(shared) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n      var _getState3, userInfo, config, _yield$axios$put, data;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              dispatch({\n                type: SHARED_UPDATE_REQUEST\n              });\n              _getState3 = getState(), userInfo = _getState3.userLogin.userInfo;\n              config = {\n                headers: {\n                  Authorization: \"Bearer \".concat(userInfo.token),\n                  'Cache-Control': 'no-cache'\n                }\n              };\n              _context3.next = 6;\n              return axios.put(\"/api/compartidas/\".concat(shared.id_compartida), shared, config);\n\n            case 6:\n              _yield$axios$put = _context3.sent;\n              data = _yield$axios$put.data;\n              dispatch({\n                type: SHARED_UPDATE_SUCCESS,\n                payload: data\n              });\n              _context3.next = 14;\n              break;\n\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](0);\n              dispatch({\n                type: SHARED_UPDATE_FAIL,\n                payload: _context3.t0.response && _context3.t0.response.data.message ? _context3.t0.response.data.message : _context3.t0.message\n              });\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 11]]);\n    }));\n\n    return function (_x5, _x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var deleteShared = function deleteShared(id) {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch, getState) {\n      var _getState4, userInfo, config;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              dispatch({\n                type: SHARED_DELETE_REQUEST\n              });\n              _getState4 = getState(), userInfo = _getState4.userLogin.userInfo;\n              config = {\n                headers: {\n                  Authorization: \"Bearer \".concat(userInfo.token),\n                  'Cache-Control': 'no-cache'\n                }\n              };\n              _context4.next = 6;\n              return axios.delete(\"/api/compartidas/\".concat(id), config);\n\n            case 6:\n              dispatch({\n                type: SHARED_DELETE_SUCCESS\n              });\n              _context4.next = 12;\n              break;\n\n            case 9:\n              _context4.prev = 9;\n              _context4.t0 = _context4[\"catch\"](0);\n              dispatch({\n                type: SHARED_DELETE_FAIL,\n                payload: _context4.t0.response && _context4.t0.response.data.message ? _context4.t0.response.data.message : _context4.t0.message\n              });\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 9]]);\n    }));\n\n    return function (_x7, _x8) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport var getSharedByTaskId = function getSharedByTaskId(taskId) {\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch, getState) {\n      var _getState5, userInfo, config, _yield$axios$get2, data;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              dispatch({\n                type: SHARED_LIST_BY_TASK_ID_REQUEST\n              });\n              _getState5 = getState(), userInfo = _getState5.userLogin.userInfo;\n              config = {\n                headers: {\n                  Authorization: \"Bearer \".concat(userInfo.token),\n                  'Cache-Control': 'no-cache'\n                }\n              };\n              _context5.next = 6;\n              return axios.get(\"/api/compartidas/lista-tarea/\".concat(taskId), config);\n\n            case 6:\n              _yield$axios$get2 = _context5.sent;\n              data = _yield$axios$get2.data;\n              dispatch({\n                type: SHARED_LIST_BY_TASK_ID_SUCCESS,\n                payload: data\n              });\n              _context5.next = 14;\n              break;\n\n            case 11:\n              _context5.prev = 11;\n              _context5.t0 = _context5[\"catch\"](0);\n              dispatch({\n                type: SHARED_LIST_BY_TASK_ID_FAIL,\n                payload: _context5.t0.response && _context5.t0.response.data.message ? _context5.t0.response.data.message : _context5.t0.message\n              });\n\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[0, 11]]);\n    }));\n\n    return function (_x9, _x10) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n};\nexport var getTasksShared = function getTasksShared(managerId) {\n  return /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch, getState) {\n      var _getState6, userInfo, config, _yield$axios$get3, data;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              dispatch({\n                type: SHARED_TO_MANAGER_LIST_REQUEST\n              });\n              _getState6 = getState(), userInfo = _getState6.userLogin.userInfo;\n              config = {\n                headers: {\n                  Authorization: \"Bearer \".concat(userInfo.token),\n                  'Cache-Control': 'no-cache'\n                }\n              };\n              _context6.next = 6;\n              return axios.get(\"/api/compartidas/lista-tareas/\".concat(managerId), config);\n\n            case 6:\n              _yield$axios$get3 = _context6.sent;\n              data = _yield$axios$get3.data;\n              dispatch({\n                type: SHARED_TO_MANAGER_LIST_SUCCESS,\n                payload: data\n              });\n              _context6.next = 14;\n              break;\n\n            case 11:\n              _context6.prev = 11;\n              _context6.t0 = _context6[\"catch\"](0);\n              dispatch({\n                type: SHARED_TO_MANAGER_LIST_FAIL,\n                payload: _context6.t0.response && _context6.t0.response.data.message ? _context6.t0.response.data.message : _context6.t0.message\n              });\n\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[0, 11]]);\n    }));\n\n    return function (_x11, _x12) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/PruebaDespliegueAzure/Frontend/src/redux/actions/sharedActions.js"],"names":["axios","SHARED_REGISTER_REQUEST","SHARED_REGISTER_SUCCESS","SHARED_REGISTER_FAIL","SHARED_LIST_REQUEST","SHARED_LIST_SUCCESS","SHARED_LIST_FAIL","SHARED_UPDATE_SUCCESS","SHARED_UPDATE_REQUEST","SHARED_UPDATE_FAIL","SHARED_DELETE_FAIL","SHARED_DELETE_REQUEST","SHARED_DELETE_SUCCESS","SHARED_LIST_BY_TASK_ID_REQUEST","SHARED_LIST_BY_TASK_ID_SUCCESS","SHARED_LIST_BY_TASK_ID_FAIL","SHARED_TO_MANAGER_LIST_REQUEST","SHARED_TO_MANAGER_LIST_SUCCESS","SHARED_TO_MANAGER_LIST_FAIL","registerShared","shared","dispatch","getState","type","userInfo","userLogin","config","headers","Authorization","token","post","data","payload","response","message","getSharedList","get","sharedUpdateInfo","put","id_compartida","deleteShared","id","delete","getSharedByTaskId","taskId","getTasksShared","managerId"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { \r\n  SHARED_REGISTER_REQUEST,\r\n  SHARED_REGISTER_SUCCESS,\r\n  SHARED_REGISTER_FAIL,\r\n  SHARED_LIST_REQUEST, \r\n  SHARED_LIST_SUCCESS, \r\n  SHARED_LIST_FAIL,\r\n  SHARED_UPDATE_SUCCESS,\r\n  SHARED_UPDATE_REQUEST,\r\n  SHARED_UPDATE_FAIL,\r\n  SHARED_DELETE_FAIL,\r\n  SHARED_DELETE_REQUEST,\r\n  SHARED_DELETE_SUCCESS,\r\n  SHARED_LIST_BY_TASK_ID_REQUEST,\r\n  SHARED_LIST_BY_TASK_ID_SUCCESS,\r\n  SHARED_LIST_BY_TASK_ID_FAIL,\r\n  SHARED_TO_MANAGER_LIST_REQUEST,\r\n  SHARED_TO_MANAGER_LIST_SUCCESS,\r\n  SHARED_TO_MANAGER_LIST_FAIL,\r\n} from '../constants/sharedConstants'\r\n\r\nexport const registerShared = (shared) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: SHARED_REGISTER_REQUEST })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        'Cache-Control': 'no-cache',\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.post('/api/compartidas', shared, config)\r\n\r\n    dispatch({ type: SHARED_REGISTER_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: SHARED_REGISTER_FAIL,\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const getSharedList = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: SHARED_LIST_REQUEST })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        'Cache-Control': 'no-cache',\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.get('/api/compartidas', config)\r\n\r\n    dispatch({ type: SHARED_LIST_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: SHARED_LIST_FAIL,\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const sharedUpdateInfo = (shared) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: SHARED_UPDATE_REQUEST })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        'Cache-Control': 'no-cache',\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.put(`/api/compartidas/${shared.id_compartida}`, shared, config)\r\n\r\n    dispatch({ type: SHARED_UPDATE_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: SHARED_UPDATE_FAIL,\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const deleteShared = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: SHARED_DELETE_REQUEST })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        'Cache-Control': 'no-cache',\r\n      },\r\n    }\r\n\r\n    await axios.delete(`/api/compartidas/${id}`, config)\r\n\r\n    dispatch({ type: SHARED_DELETE_SUCCESS })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: SHARED_DELETE_FAIL,\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const getSharedByTaskId = (taskId) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: SHARED_LIST_BY_TASK_ID_REQUEST })\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        'Cache-Control': 'no-cache',\r\n      },\r\n    }\r\n    const { data } = await axios.get(`/api/compartidas/lista-tarea/${taskId}`, config)\r\n\r\n    dispatch({ type: SHARED_LIST_BY_TASK_ID_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: SHARED_LIST_BY_TASK_ID_FAIL,\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const getTasksShared = (managerId) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: SHARED_TO_MANAGER_LIST_REQUEST })\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        'Cache-Control': 'no-cache',\r\n      },\r\n    }\r\n    const { data } = await axios.get(`/api/compartidas/lista-tareas/${managerId}`, config)\r\n\r\n    dispatch({ type: SHARED_TO_MANAGER_LIST_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: SHARED_TO_MANAGER_LIST_FAIL,\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}