{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\CodigoFuente\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\Catalog\\\\Profile\\\\ProfileToManagerScreen\\\\components\\\\ProfileManagerSelect.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormControl, InputLabel, makeStyles, MenuItem, Select as Selectable } from '@material-ui/core';\nimport GridItem from 'components/Grid/GridItem';\nimport roles from 'config/roles/roles';\nimport { USER_LIST_BY_ROLE_NAME_RESET } from 'redux/constants/userConstants';\nimport { getUsersByRoleName } from 'redux/actions/userActions';\nimport styles from '../styles/profileToManagerScreen';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(styles);\n\nvar ProfileManagerSelect = function ProfileManagerSelect(_ref) {\n  _s();\n\n  var setCurrentJobPositionId = _ref.setCurrentJobPositionId,\n      currentJobPositionId = _ref.currentJobPositionId;\n  var dispatch = useDispatch();\n  var classes = useStyles();\n\n  var _useSelector = useSelector(function (state) {\n    return state.userListByRoleName;\n  }),\n      successUserListByRoleName = _useSelector.successUserListByRoleName,\n      loadingUserListByRoleName = _useSelector.loadingUserListByRoleName,\n      userListByRoleNameData = _useSelector.userListByRoleNameData,\n      errorUserListByRoleName = _useSelector.errorUserListByRoleName;\n\n  useEffect(function () {\n    if (!successUserListByRoleName && !errorUserListByRoleName) {\n      dispatch(getUsersByRoleName(roles.GESTOR_DE_PERFILES_ROLE));\n    }\n  }, [successUserListByRoleName, errorUserListByRoleName]);\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: USER_LIST_BY_ROLE_NAME_RESET\n      });\n    };\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loadingUserListByRoleName ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Cargando\"\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(GridItem, {\n      xs: 12,\n      md: 4,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          htmlFor: \"asign-role\",\n          children: \"Gestor *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(Selectable, {\n          MenuProps: {\n            className: classes.selectMenu\n          },\n          className: classes.select,\n          value: currentJobPositionId,\n          onChange: function onChange(e) {\n            setCurrentJobPositionId(e.target.value);\n          },\n          inputProps: {\n            name: 'asign-role',\n            id: 'asign-role'\n          },\n          children: [(userListByRoleNameData === null || userListByRoleNameData === void 0 ? void 0 : userListByRoleNameData.length) > 0 ? /*#__PURE__*/_jsxDEV(MenuItem, {\n            disabled: true,\n            classes: {\n              root: classes.selectMenuItem\n            },\n            children: \"Selecciona uno\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, _this) : /*#__PURE__*/_jsxDEV(MenuItem, {\n            disabled: true,\n            classes: {\n              root: classes.selectMenuItem\n            },\n            children: \"No existen usuarios gestores\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, _this), (userListByRoleNameData === null || userListByRoleNameData === void 0 ? void 0 : userListByRoleNameData.length) > 0 && userListByRoleNameData.map(function (positionJob, index) {\n            return /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: positionJob.id_puesto,\n              classes: {\n                root: classes.selectMenuItem,\n                selected: classes.selectMenuItemSelected\n              },\n              children: \"\".concat(positionJob.nombre, \" \").concat(positionJob === null || positionJob === void 0 ? void 0 : positionJob.apellido1, \" \").concat(positionJob === null || positionJob === void 0 ? void 0 : positionJob.apellido2)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 19\n            }, _this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false);\n};\n\n_s(ProfileManagerSelect, \"1bnkMJUtKvxBJag+X7BUNdsTAg4=\", false, function () {\n  return [useDispatch, useStyles, useSelector];\n});\n\n_c = ProfileManagerSelect;\nexport default ProfileManagerSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileManagerSelect\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/src/screens/control-panel/Catalog/Profile/ProfileToManagerScreen/components/ProfileManagerSelect.js"],"names":["useEffect","useDispatch","useSelector","FormControl","InputLabel","makeStyles","MenuItem","Select","Selectable","GridItem","roles","USER_LIST_BY_ROLE_NAME_RESET","getUsersByRoleName","styles","useStyles","ProfileManagerSelect","setCurrentJobPositionId","currentJobPositionId","dispatch","classes","state","userListByRoleName","successUserListByRoleName","loadingUserListByRoleName","userListByRoleNameData","errorUserListByRoleName","GESTOR_DE_PERFILES_ROLE","type","className","selectMenu","select","e","target","value","name","id","length","root","selectMenuItem","map","positionJob","index","id_puesto","selected","selectMenuItemSelected","nombre","apellido1","apellido2"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FormControl, InputLabel, makeStyles, MenuItem, Select as Selectable } from '@material-ui/core'\r\nimport GridItem from 'components/Grid/GridItem'\r\nimport roles from 'config/roles/roles'\r\nimport { USER_LIST_BY_ROLE_NAME_RESET } from 'redux/constants/userConstants'\r\nimport { getUsersByRoleName } from 'redux/actions/userActions'\r\nimport styles from '../styles/profileToManagerScreen'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nconst ProfileManagerSelect = ({ setCurrentJobPositionId, currentJobPositionId }) => {\r\n  const dispatch = useDispatch()\r\n  const classes = useStyles()\r\n\r\n  const {\r\n    successUserListByRoleName,\r\n    loadingUserListByRoleName,\r\n    userListByRoleNameData,\r\n    errorUserListByRoleName,\r\n  } = useSelector((state) => state.userListByRoleName)\r\n\r\n  useEffect(() => {\r\n    if (!successUserListByRoleName && !errorUserListByRoleName) {\r\n      dispatch(getUsersByRoleName(roles.GESTOR_DE_PERFILES_ROLE))\r\n    }\r\n  }, [successUserListByRoleName, errorUserListByRoleName])\r\n\r\n  useEffect(() => {\r\n    return () => dispatch({ type: USER_LIST_BY_ROLE_NAME_RESET })\r\n  }, [dispatch])\r\n  \r\n  return (\r\n    <>\r\n      {loadingUserListByRoleName ? (\r\n        <>Cargando</>\r\n      ) : (\r\n        <GridItem xs={12} md={4}>\r\n          <FormControl fullWidth>\r\n            <InputLabel htmlFor='asign-role'>Gestor *</InputLabel>\r\n            <Selectable\r\n              MenuProps={{\r\n                className: classes.selectMenu,\r\n              }}\r\n              className={classes.select}\r\n              value={currentJobPositionId}\r\n              onChange={(e) => {\r\n                setCurrentJobPositionId(e.target.value)\r\n              }}\r\n              inputProps={{\r\n                name: 'asign-role',\r\n                id: 'asign-role',\r\n              }}\r\n            >\r\n              {userListByRoleNameData?.length > 0 ? (\r\n                <MenuItem\r\n                  disabled\r\n                  classes={{\r\n                    root: classes.selectMenuItem,\r\n                  }}\r\n                >\r\n                  Selecciona uno\r\n                </MenuItem>\r\n              ) : (\r\n                <MenuItem\r\n                  disabled\r\n                  classes={{\r\n                    root: classes.selectMenuItem,\r\n                  }}\r\n                >\r\n                  No existen usuarios gestores\r\n                </MenuItem>\r\n              )}\r\n              {userListByRoleNameData?.length > 0 &&\r\n                userListByRoleNameData.map((positionJob, index) => (\r\n                  <MenuItem\r\n                    value={positionJob.id_puesto}\r\n                    key={index}\r\n                    classes={{ root: classes.selectMenuItem, selected: classes.selectMenuItemSelected }}\r\n                  >\r\n                    {`${positionJob.nombre} ${positionJob?.apellido1} ${positionJob?.apellido2}`}\r\n                  </MenuItem>\r\n                ))}\r\n            </Selectable>\r\n          </FormControl>\r\n        </GridItem>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProfileManagerSelect\r\n"]},"metadata":{},"sourceType":"module"}