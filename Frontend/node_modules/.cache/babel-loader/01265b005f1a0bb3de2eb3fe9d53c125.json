{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\AsignEntriesScreen\\\\AsignEntryRegister\\\\components\\\\TaskEntriesSelect.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormControl, InputLabel, makeStyles, MenuItem, Select as Selectable } from '@material-ui/core';\nimport GridItem from 'components/Grid/GridItem'; // import { TEAM_WORKS_BY_RESPONSIBLE_RESET } from 'redux/constants/teamWorkConstants'\n\nimport { getEntriesToManager } from 'redux/actions/entriesManagerActions';\nimport { ENTRIES_TO_MANAGER_LIST_RESET } from 'redux/constants/entriesManagerConstants';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar TaskEntriesSelect = function TaskEntriesSelect(_ref) {\n  _s();\n\n  var setTaskEntryId = _ref.setTaskEntryId,\n      taskEntryId = _ref.taskEntryId;\n  var dispatch = useDispatch();\n  var classes = {};\n\n  var _useSelector = useSelector(function (state) {\n    return state.entriesToManagerList;\n  }),\n      loadingEntriesToManagerList = _useSelector.loadingEntriesToManagerList,\n      successEntriesToManagerList = _useSelector.successEntriesToManagerList,\n      entriesToManagerList = _useSelector.entriesToManagerList;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.userLogin;\n  }),\n      userInfo = _useSelector2.userInfo;\n\n  useEffect(function () {\n    if (!successEntriesToManagerList) {\n      dispatch(getEntriesToManager(userInfo.id_puesto));\n    }\n  }, [successEntriesToManagerList]);\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: ENTRIES_TO_MANAGER_LIST_RESET\n      });\n    };\n  }, [dispatch]);\n\n  var isEmpty = function isEmpty(arr) {\n    return arr.length <= 0;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loadingEntriesToManagerList ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Cargando\"\n    }, void 0, false) : entriesToManagerList && /*#__PURE__*/_jsxDEV(GridItem, {\n      xs: 12,\n      md: 6,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          htmlFor: \"register-entry\",\n          children: isEmpty(entriesToManagerList === null || entriesToManagerList === void 0 ? void 0 : entriesToManagerList.assigned) ? 'No hay Tareas para seleccionar' : 'Tareas *'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(Selectable, {\n          MenuProps: {\n            className: classes.selectMenu\n          },\n          className: classes.select,\n          value: taskEntryId,\n          onChange: function onChange(e) {\n            setTaskEntryId(e.target.value);\n          },\n          disabled: isEmpty(entriesToManagerList === null || entriesToManagerList === void 0 ? void 0 : entriesToManagerList.assigned),\n          inputProps: {\n            name: 'register-entry',\n            id: 'register-entry'\n          },\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            classes: {\n              root: classes.selectMenuItem\n            },\n            disabled: true,\n            children: \"Selecciona uno\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, _this), entriesToManagerList.assigned.map(function (taskEntry, index) {\n            return /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: taskEntry.id_tarea,\n              classes: {\n                root: classes.selectMenuItem,\n                selected: classes.selectMenuItemSelected\n              },\n              children: [taskEntry.codigo_perfil && \"TAREA: \".concat(taskEntry.descripcion_tarea, \" PERFIL: \").concat(taskEntry.codigo_perfil, \" \"), taskEntry.nombre && \"TAREA: \".concat(taskEntry.descripcion_tarea, \" PUESTO: \").concat(taskEntry.nombre, \" \").concat(taskEntry.apellido1, \" \").concat(taskEntry.apellido2, \" \")]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 19\n            }, _this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, _this)\n  }, void 0, false);\n};\n\n_s(TaskEntriesSelect, \"2aO8nVHHyBqYgyUHLnevBAz/dn4=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = TaskEntriesSelect;\nexport default TaskEntriesSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskEntriesSelect\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/src/screens/control-panel/AsignEntriesScreen/AsignEntryRegister/components/TaskEntriesSelect.js"],"names":["useEffect","useDispatch","useSelector","FormControl","InputLabel","makeStyles","MenuItem","Select","Selectable","GridItem","getEntriesToManager","ENTRIES_TO_MANAGER_LIST_RESET","TaskEntriesSelect","setTaskEntryId","taskEntryId","dispatch","classes","state","entriesToManagerList","loadingEntriesToManagerList","successEntriesToManagerList","userLogin","userInfo","id_puesto","type","isEmpty","arr","length","assigned","className","selectMenu","select","e","target","value","name","id","root","selectMenuItem","map","taskEntry","index","id_tarea","selected","selectMenuItemSelected","codigo_perfil","descripcion_tarea","nombre","apellido1","apellido2"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FormControl, InputLabel, makeStyles, MenuItem, Select as Selectable } from '@material-ui/core'\r\nimport GridItem from 'components/Grid/GridItem'\r\n// import { TEAM_WORKS_BY_RESPONSIBLE_RESET } from 'redux/constants/teamWorkConstants'\r\nimport { getEntriesToManager } from 'redux/actions/entriesManagerActions'\r\nimport { ENTRIES_TO_MANAGER_LIST_RESET } from 'redux/constants/entriesManagerConstants'\r\n\r\nconst TaskEntriesSelect = ({ setTaskEntryId, taskEntryId }) => {\r\n  const dispatch = useDispatch()\r\n  const classes = {}\r\n\r\n  const { loadingEntriesToManagerList, successEntriesToManagerList, entriesToManagerList } = useSelector(\r\n    (state) => state.entriesToManagerList\r\n  )\r\n  const { userInfo } = useSelector((state) => state.userLogin)\r\n\r\n  useEffect(() => {\r\n    if (!successEntriesToManagerList) {\r\n      dispatch(getEntriesToManager(userInfo.id_puesto))\r\n    }\r\n  }, [successEntriesToManagerList])\r\n\r\n  useEffect(() => {\r\n    return () => dispatch({ type: ENTRIES_TO_MANAGER_LIST_RESET })\r\n  }, [dispatch])\r\n\r\n  const isEmpty = (arr) => arr.length <= 0\r\n\r\n  return (\r\n    <>\r\n      {loadingEntriesToManagerList ? (\r\n        <>Cargando</>\r\n      ) : (\r\n        entriesToManagerList && (\r\n          <GridItem xs={12} md={6}>\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor='register-entry'>\r\n                {isEmpty(entriesToManagerList?.assigned) ? 'No hay Tareas para seleccionar' : 'Tareas *'}\r\n              </InputLabel>\r\n              <Selectable\r\n                MenuProps={{\r\n                  className: classes.selectMenu,\r\n                }}\r\n                className={classes.select}\r\n                value={taskEntryId}\r\n                onChange={(e) => {\r\n                  setTaskEntryId(e.target.value)\r\n                }}\r\n                disabled={isEmpty(entriesToManagerList?.assigned)}\r\n                inputProps={{\r\n                  name: 'register-entry',\r\n                  id: 'register-entry',\r\n                }}\r\n              >\r\n                <MenuItem\r\n                  classes={{\r\n                    root: classes.selectMenuItem,\r\n                  }}\r\n                  disabled\r\n                >\r\n                  Selecciona uno\r\n                </MenuItem>\r\n                {entriesToManagerList.assigned.map((taskEntry, index) => (\r\n                  <MenuItem\r\n                    value={taskEntry.id_tarea}\r\n                    key={index}\r\n                    classes={{ root: classes.selectMenuItem, selected: classes.selectMenuItemSelected }}\r\n                  >\r\n                    {taskEntry.codigo_perfil && (\r\n                       `TAREA: ${taskEntry.descripcion_tarea} PERFIL: ${taskEntry.codigo_perfil} `\r\n                     )}\r\n                    \r\n                    {taskEntry.nombre && (\r\n                       `TAREA: ${taskEntry.descripcion_tarea} PUESTO: ${taskEntry.nombre} ${taskEntry.apellido1} ${taskEntry.apellido2} `\r\n                    )}\r\n                  </MenuItem>\r\n                ))}\r\n              </Selectable>\r\n            </FormControl>\r\n          </GridItem>\r\n        )\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TaskEntriesSelect\r\n"]},"metadata":{},"sourceType":"module"}