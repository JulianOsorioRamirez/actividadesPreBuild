{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { ENTRIES_LIST_REQUEST, ENTRIES_LIST_SUCCESS, ENTRIES_LIST_FAIL, ENTRIES_DELETE_REQUEST, ENTRIES_DELETE_SUCCESS, ENTRIES_DELETE_FAIL, ENTRIES_LIST_BY_MANAGER_ID_REQUEST, ENTRIES_LIST_BY_MANAGER_ID_SUCCESS, ENTRIES_LIST_BY_MANAGER_ID_FAIL, ENTRIES_LIST_BY_TASK_ID_REQUEST, ENTRIES_LIST_BY_TASK_ID_SUCCESS, ENTRIES_LIST_BY_TASK_ID_FAIL, ENTRIES_REGISTER_REQUEST, ENTRIES_REGISTER_SUCCESS, ENTRIES_REGISTER_FAIL, ENTRIES_UPDATE_REQUEST, ENTRIES_UPDATE_SUCCESS, ENTRIES_UPDATE_FAIL } from '../constants/entriesConstants';\nexport var getEntries = function getEntries() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, getState) {\n      var _getState, userInfo, config, _yield$axios$get, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              dispatch({\n                type: ENTRIES_LIST_REQUEST\n              });\n              _getState = getState(), userInfo = _getState.userLogin.userInfo;\n              config = {\n                headers: {\n                  Authorization: \"Bearer \".concat(userInfo.token),\n                  'Cache-Control': 'no-cache'\n                }\n              };\n              _context.next = 6;\n              return axios.get(\"/api/entradas/gestores-datos\", config);\n\n            case 6:\n              _yield$axios$get = _context.sent;\n              data = _yield$axios$get.data;\n              dispatch({\n                type: ENTRIES_LIST_SUCCESS,\n                payload: data\n              });\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              dispatch({\n                type: ENTRIES_LIST_FAIL,\n                payload: _context.t0.response && _context.t0.response.data.message ? _context.t0.response.data.message : _context.t0.message\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var registerEntries = function registerEntries(newEntry) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n      var _getState2, userInfo, config, _yield$axios$post, data;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              dispatch({\n                type: ENTRIES_REGISTER_REQUEST\n              });\n              _getState2 = getState(), userInfo = _getState2.userLogin.userInfo;\n              config = {\n                headers: {\n                  Authorization: \"Bearer \".concat(userInfo.token),\n                  'Cache-Control': 'no-cache'\n                }\n              };\n              _context2.next = 6;\n              return axios.post(\"/api/entradas/lista-tarea/\".concat(newEntry.id_tarea), newEntry, config);\n\n            case 6:\n              _yield$axios$post = _context2.sent;\n              data = _yield$axios$post.data;\n              dispatch({\n                type: ENTRIES_REGISTER_SUCCESS,\n                payload: data\n              });\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](0);\n              dispatch({\n                type: ENTRIES_REGISTER_FAIL,\n                payload: _context2.t0.response && _context2.t0.response.data.message ? _context2.t0.response.data.message : _context2.t0.message\n              });\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 11]]);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var updateEntries = function updateEntries(entry) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n      var _getState3, userInfo, config, _yield$axios$put, data;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              dispatch({\n                type: ENTRIES_UPDATE_REQUEST\n              });\n              _getState3 = getState(), userInfo = _getState3.userLogin.userInfo;\n              config = {\n                headers: {\n                  Authorization: \"Bearer \".concat(userInfo.token),\n                  'Cache-Control': 'no-cache'\n                }\n              };\n              _context3.next = 6;\n              return axios.put(\"/api/entradas/lista-tarea/\".concat(entry.id_entrada), entry, config);\n\n            case 6:\n              _yield$axios$put = _context3.sent;\n              data = _yield$axios$put.data;\n              dispatch({\n                type: ENTRIES_UPDATE_SUCCESS,\n                payload: data\n              });\n              _context3.next = 14;\n              break;\n\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](0);\n              dispatch({\n                type: ENTRIES_UPDATE_FAIL,\n                payload: _context3.t0.response && _context3.t0.response.data.message ? _context3.t0.response.data.message : _context3.t0.message\n              });\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 11]]);\n    }));\n\n    return function (_x5, _x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var getEntriesByManagerId = function getEntriesByManagerId(managerId) {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch, getState) {\n      var _getState4, userInfo, config, _yield$axios$get2, data;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              dispatch({\n                type: ENTRIES_LIST_BY_MANAGER_ID_REQUEST\n              });\n              _getState4 = getState(), userInfo = _getState4.userLogin.userInfo;\n              config = {\n                headers: {\n                  Authorization: \"Bearer \".concat(userInfo.token),\n                  'Cache-Control': 'no-cache'\n                }\n              };\n              _context4.next = 6;\n              return axios.get(\"/api/entradas/lista-gestor/\".concat(managerId), config);\n\n            case 6:\n              _yield$axios$get2 = _context4.sent;\n              data = _yield$axios$get2.data;\n              dispatch({\n                type: ENTRIES_LIST_BY_MANAGER_ID_SUCCESS,\n                payload: data\n              });\n              _context4.next = 14;\n              break;\n\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](0);\n              dispatch({\n                type: ENTRIES_LIST_BY_MANAGER_ID_FAIL,\n                payload: _context4.t0.response && _context4.t0.response.data.message ? _context4.t0.response.data.message : _context4.t0.message\n              });\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 11]]);\n    }));\n\n    return function (_x7, _x8) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport var getEntriesByTaskId = function getEntriesByTaskId(taskId) {\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch, getState) {\n      var _getState5, userInfo, config, _yield$axios$get3, data;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              dispatch({\n                type: ENTRIES_LIST_BY_TASK_ID_REQUEST\n              });\n              _getState5 = getState(), userInfo = _getState5.userLogin.userInfo;\n              config = {\n                headers: {\n                  Authorization: \"Bearer \".concat(userInfo.token),\n                  'Cache-Control': 'no-cache'\n                }\n              };\n              _context5.next = 6;\n              return axios.get(\"/api/entradas/lista-tarea/\".concat(taskId), config);\n\n            case 6:\n              _yield$axios$get3 = _context5.sent;\n              data = _yield$axios$get3.data;\n              dispatch({\n                type: ENTRIES_LIST_BY_TASK_ID_SUCCESS,\n                payload: data\n              });\n              _context5.next = 14;\n              break;\n\n            case 11:\n              _context5.prev = 11;\n              _context5.t0 = _context5[\"catch\"](0);\n              dispatch({\n                type: ENTRIES_LIST_BY_TASK_ID_FAIL,\n                payload: _context5.t0.response && _context5.t0.response.data.message ? _context5.t0.response.data.message : _context5.t0.message\n              });\n\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[0, 11]]);\n    }));\n\n    return function (_x9, _x10) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n};\nexport var deleteEntry = function deleteEntry(entryId) {\n  return /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch, getState) {\n      var _getState6, userInfo, config;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              dispatch({\n                type: ENTRIES_DELETE_REQUEST\n              });\n              _getState6 = getState(), userInfo = _getState6.userLogin.userInfo;\n              config = {\n                headers: {\n                  Authorization: \"Bearer \".concat(userInfo.token),\n                  'Cache-Control': 'no-cache'\n                }\n              };\n              _context6.next = 6;\n              return axios.delete(\"/api/entradas/gestores-datos/\".concat(entryId), config);\n\n            case 6:\n              dispatch({\n                type: ENTRIES_DELETE_SUCCESS\n              });\n              _context6.next = 12;\n              break;\n\n            case 9:\n              _context6.prev = 9;\n              _context6.t0 = _context6[\"catch\"](0);\n              dispatch({\n                type: ENTRIES_DELETE_FAIL,\n                payload: _context6.t0.response && _context6.t0.response.data.message ? _context6.t0.response.data.message : _context6.t0.message\n              });\n\n            case 12:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[0, 9]]);\n    }));\n\n    return function (_x11, _x12) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/src/redux/actions/entriesActions.js"],"names":["axios","ENTRIES_LIST_REQUEST","ENTRIES_LIST_SUCCESS","ENTRIES_LIST_FAIL","ENTRIES_DELETE_REQUEST","ENTRIES_DELETE_SUCCESS","ENTRIES_DELETE_FAIL","ENTRIES_LIST_BY_MANAGER_ID_REQUEST","ENTRIES_LIST_BY_MANAGER_ID_SUCCESS","ENTRIES_LIST_BY_MANAGER_ID_FAIL","ENTRIES_LIST_BY_TASK_ID_REQUEST","ENTRIES_LIST_BY_TASK_ID_SUCCESS","ENTRIES_LIST_BY_TASK_ID_FAIL","ENTRIES_REGISTER_REQUEST","ENTRIES_REGISTER_SUCCESS","ENTRIES_REGISTER_FAIL","ENTRIES_UPDATE_REQUEST","ENTRIES_UPDATE_SUCCESS","ENTRIES_UPDATE_FAIL","getEntries","dispatch","getState","type","userInfo","userLogin","config","headers","Authorization","token","get","data","payload","response","message","registerEntries","newEntry","post","id_tarea","updateEntries","entry","put","id_entrada","getEntriesByManagerId","managerId","getEntriesByTaskId","taskId","deleteEntry","entryId","delete"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,iBAHF,EAIEC,sBAJF,EAKEC,sBALF,EAMEC,mBANF,EAOEC,kCAPF,EAQEC,kCARF,EASEC,+BATF,EAUEC,+BAVF,EAWEC,+BAXF,EAYEC,4BAZF,EAaEC,wBAbF,EAcEC,wBAdF,EAeEC,qBAfF,EAgBEC,sBAhBF,EAiBEC,sBAjBF,EAkBEC,mBAlBF,QAmBO,+BAnBP;AAqBA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA,wEAAM,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAE5BD,cAAAA,QAAQ,CAAC;AAAEE,gBAAAA,IAAI,EAAErB;AAAR,eAAD,CAAR;AAF4B,0BAKxBoB,QAAQ,EALgB,EAIbE,QAJa,aAI1BC,SAJ0B,CAIbD,QAJa;AAOtBE,cAAAA,MAPsB,GAOb;AACbC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,aAAa,mBAAYJ,QAAQ,CAACK,KAArB,CADN;AAEP,mCAAiB;AAFV;AADI,eAPa;AAAA;AAAA,qBAaL5B,KAAK,CAAC6B,GAAN,iCAA0CJ,MAA1C,CAbK;;AAAA;AAAA;AAapBK,cAAAA,IAboB,oBAapBA,IAboB;AAe5BV,cAAAA,QAAQ,CAAC;AAAEE,gBAAAA,IAAI,EAAEpB,oBAAR;AAA8B6B,gBAAAA,OAAO,EAAED;AAAvC,eAAD,CAAR;AAf4B;AAAA;;AAAA;AAAA;AAAA;AAiB5BV,cAAAA,QAAQ,CAAC;AACPE,gBAAAA,IAAI,EAAEnB,iBADC;AAEP4B,gBAAAA,OAAO,EAAE,YAAMC,QAAN,IAAkB,YAAMA,QAAN,CAAeF,IAAf,CAAoBG,OAAtC,GAAgD,YAAMD,QAAN,CAAeF,IAAf,CAAoBG,OAApE,GAA8E,YAAMA;AAFtF,eAAD,CAAR;;AAjB4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAuBP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD;AAAA;AAAA,yEAAc,kBAAOf,QAAP,EAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEzCD,cAAAA,QAAQ,CAAC;AAAEE,gBAAAA,IAAI,EAAET;AAAR,eAAD,CAAR;AAFyC,2BAKrCQ,QAAQ,EAL6B,EAI1BE,QAJ0B,cAIvCC,SAJuC,CAI1BD,QAJ0B;AAOnCE,cAAAA,MAPmC,GAO1B;AACbC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,aAAa,mBAAYJ,QAAQ,CAACK,KAArB,CADN;AAEP,mCAAiB;AAFV;AADI,eAP0B;AAAA;AAAA,qBAalB5B,KAAK,CAACoC,IAAN,qCAAwCD,QAAQ,CAACE,QAAjD,GAA6DF,QAA7D,EAAuEV,MAAvE,CAbkB;;AAAA;AAAA;AAajCK,cAAAA,IAbiC,qBAajCA,IAbiC;AAezCV,cAAAA,QAAQ,CAAC;AAAEE,gBAAAA,IAAI,EAAER,wBAAR;AAAkCiB,gBAAAA,OAAO,EAAED;AAA3C,eAAD,CAAR;AAfyC;AAAA;;AAAA;AAAA;AAAA;AAiBzCV,cAAAA,QAAQ,CAAC;AACPE,gBAAAA,IAAI,EAAEP,qBADC;AAEPgB,gBAAAA,OAAO,EAAE,aAAMC,QAAN,IAAkB,aAAMA,QAAN,CAAeF,IAAf,CAAoBG,OAAtC,GAAgD,aAAMD,QAAN,CAAeF,IAAf,CAAoBG,OAApE,GAA8E,aAAMA;AAFtF,eAAD,CAAR;;AAjByC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAuBP,OAAO,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD;AAAA;AAAA,yEAAW,kBAAOnB,QAAP,EAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpCD,cAAAA,QAAQ,CAAC;AAAEE,gBAAAA,IAAI,EAAEN;AAAR,eAAD,CAAR;AAFoC,2BAKhCK,QAAQ,EALwB,EAIrBE,QAJqB,cAIlCC,SAJkC,CAIrBD,QAJqB;AAO9BE,cAAAA,MAP8B,GAOrB;AACbC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,aAAa,mBAAYJ,QAAQ,CAACK,KAArB,CADN;AAEP,mCAAiB;AAFV;AADI,eAPqB;AAAA;AAAA,qBAab5B,KAAK,CAACwC,GAAN,qCAAuCD,KAAK,CAACE,UAA7C,GAA2DF,KAA3D,EAAkEd,MAAlE,CAba;;AAAA;AAAA;AAa5BK,cAAAA,IAb4B,oBAa5BA,IAb4B;AAepCV,cAAAA,QAAQ,CAAC;AAAEE,gBAAAA,IAAI,EAAEL,sBAAR;AAAgCc,gBAAAA,OAAO,EAAED;AAAzC,eAAD,CAAR;AAfoC;AAAA;;AAAA;AAAA;AAAA;AAiBpCV,cAAAA,QAAQ,CAAC;AACPE,gBAAAA,IAAI,EAAEJ,mBADC;AAEPa,gBAAAA,OAAO,EAAE,aAAMC,QAAN,IAAkB,aAAMA,QAAN,CAAeF,IAAf,CAAoBG,OAAtC,GAAgD,aAAMD,QAAN,CAAeF,IAAf,CAAoBG,OAApE,GAA8E,aAAMA;AAFtF,eAAD,CAAR;;AAjBoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AAuBP,OAAO,IAAMS,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,SAAD;AAAA;AAAA,yEAAe,kBAAOvB,QAAP,EAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhDD,cAAAA,QAAQ,CAAC;AAAEE,gBAAAA,IAAI,EAAEf;AAAR,eAAD,CAAR;AAFgD,2BAK5Cc,QAAQ,EALoC,EAIjCE,QAJiC,cAI9CC,SAJ8C,CAIjCD,QAJiC;AAO1CE,cAAAA,MAP0C,GAOjC;AACbC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,aAAa,mBAAYJ,QAAQ,CAACK,KAArB,CADN;AAEP,mCAAiB;AAFV;AADI,eAPiC;AAAA;AAAA,qBAazB5B,KAAK,CAAC6B,GAAN,sCAAwCc,SAAxC,GAAqDlB,MAArD,CAbyB;;AAAA;AAAA;AAaxCK,cAAAA,IAbwC,qBAaxCA,IAbwC;AAehDV,cAAAA,QAAQ,CAAC;AAAEE,gBAAAA,IAAI,EAAEd,kCAAR;AAA4CuB,gBAAAA,OAAO,EAAED;AAArD,eAAD,CAAR;AAfgD;AAAA;;AAAA;AAAA;AAAA;AAiBhDV,cAAAA,QAAQ,CAAC;AACPE,gBAAAA,IAAI,EAAEb,+BADC;AAEPsB,gBAAAA,OAAO,EAAE,aAAMC,QAAN,IAAkB,aAAMA,QAAN,CAAeF,IAAf,CAAoBG,OAAtC,GAAgD,aAAMD,QAAN,CAAeF,IAAf,CAAoBG,OAApE,GAA8E,aAAMA;AAFtF,eAAD,CAAR;;AAjBgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9B;AAuBP,OAAO,IAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,MAAD;AAAA;AAAA,yEAAY,kBAAOzB,QAAP,EAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAE1CD,cAAAA,QAAQ,CAAC;AAAEE,gBAAAA,IAAI,EAAEZ;AAAR,eAAD,CAAR;AAF0C,2BAKtCW,QAAQ,EAL8B,EAI3BE,QAJ2B,cAIxCC,SAJwC,CAI3BD,QAJ2B;AAOpCE,cAAAA,MAPoC,GAO3B;AACbC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,aAAa,mBAAYJ,QAAQ,CAACK,KAArB,CADN;AAEP,mCAAiB;AAFV;AADI,eAP2B;AAAA;AAAA,qBAanB5B,KAAK,CAAC6B,GAAN,qCAAuCgB,MAAvC,GAAiDpB,MAAjD,CAbmB;;AAAA;AAAA;AAalCK,cAAAA,IAbkC,qBAalCA,IAbkC;AAe1CV,cAAAA,QAAQ,CAAC;AAAEE,gBAAAA,IAAI,EAAEX,+BAAR;AAAyCoB,gBAAAA,OAAO,EAAED;AAAlD,eAAD,CAAR;AAf0C;AAAA;;AAAA;AAAA;AAAA;AAiB1CV,cAAAA,QAAQ,CAAC;AACPE,gBAAAA,IAAI,EAAEV,4BADC;AAEPmB,gBAAAA,OAAO,EAAE,aAAMC,QAAN,IAAkB,aAAMA,QAAN,CAAeF,IAAf,CAAoBG,OAAtC,GAAgD,aAAMD,QAAN,CAAeF,IAAf,CAAoBG,OAApE,GAA8E,aAAMA;AAFtF,eAAD,CAAR;;AAjB0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;AAuBP,OAAO,IAAMa,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD;AAAA;AAAA,yEAAa,kBAAO3B,QAAP,EAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpCD,cAAAA,QAAQ,CAAC;AAAEE,gBAAAA,IAAI,EAAElB;AAAR,eAAD,CAAR;AAFoC,2BAKhCiB,QAAQ,EALwB,EAIrBE,QAJqB,cAIlCC,SAJkC,CAIrBD,QAJqB;AAO9BE,cAAAA,MAP8B,GAOrB;AACbC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,aAAa,mBAAYJ,QAAQ,CAACK,KAArB,CADN;AAEP,mCAAiB;AAFV;AADI,eAPqB;AAAA;AAAA,qBAc9B5B,KAAK,CAACgD,MAAN,wCAA6CD,OAA7C,GAAwDtB,MAAxD,CAd8B;;AAAA;AAgBpCL,cAAAA,QAAQ,CAAC;AAAEE,gBAAAA,IAAI,EAAEjB;AAAR,eAAD,CAAR;AAhBoC;AAAA;;AAAA;AAAA;AAAA;AAkBpCe,cAAAA,QAAQ,CAAC;AACPE,gBAAAA,IAAI,EAAEhB,mBADC;AAEPyB,gBAAAA,OAAO,EAAE,aAAMC,QAAN,IAAkB,aAAMA,QAAN,CAAeF,IAAf,CAAoBG,OAAtC,GAAgD,aAAMD,QAAN,CAAeF,IAAf,CAAoBG,OAApE,GAA8E,aAAMA;AAFtF,eAAD,CAAR;;AAlBoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB","sourcesContent":["import axios from 'axios'\r\nimport {\r\n  ENTRIES_LIST_REQUEST,\r\n  ENTRIES_LIST_SUCCESS,\r\n  ENTRIES_LIST_FAIL,\r\n  ENTRIES_DELETE_REQUEST,\r\n  ENTRIES_DELETE_SUCCESS,\r\n  ENTRIES_DELETE_FAIL,\r\n  ENTRIES_LIST_BY_MANAGER_ID_REQUEST,\r\n  ENTRIES_LIST_BY_MANAGER_ID_SUCCESS,\r\n  ENTRIES_LIST_BY_MANAGER_ID_FAIL,\r\n  ENTRIES_LIST_BY_TASK_ID_REQUEST,\r\n  ENTRIES_LIST_BY_TASK_ID_SUCCESS,\r\n  ENTRIES_LIST_BY_TASK_ID_FAIL,\r\n  ENTRIES_REGISTER_REQUEST,\r\n  ENTRIES_REGISTER_SUCCESS,\r\n  ENTRIES_REGISTER_FAIL,\r\n  ENTRIES_UPDATE_REQUEST,\r\n  ENTRIES_UPDATE_SUCCESS,\r\n  ENTRIES_UPDATE_FAIL,\r\n} from '../constants/entriesConstants'\r\n\r\nexport const getEntries = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ENTRIES_LIST_REQUEST })\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        'Cache-Control': 'no-cache',\r\n      },\r\n    }\r\n    const { data } = await axios.get(`/api/entradas/gestores-datos`, config)\r\n\r\n    dispatch({ type: ENTRIES_LIST_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ENTRIES_LIST_FAIL,\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    })\r\n  }\r\n}\r\nexport const registerEntries = (newEntry) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ENTRIES_REGISTER_REQUEST })\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        'Cache-Control': 'no-cache',\r\n      },\r\n    }\r\n    const { data } = await axios.post(`/api/entradas/lista-tarea/${newEntry.id_tarea}`, newEntry, config)\r\n\r\n    dispatch({ type: ENTRIES_REGISTER_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ENTRIES_REGISTER_FAIL,\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    })\r\n  }\r\n}\r\nexport const updateEntries = (entry) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ENTRIES_UPDATE_REQUEST })\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        'Cache-Control': 'no-cache',\r\n      },\r\n    }\r\n    const { data } = await axios.put(`/api/entradas/lista-tarea/${entry.id_entrada}`, entry, config)\r\n\r\n    dispatch({ type: ENTRIES_UPDATE_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ENTRIES_UPDATE_FAIL,\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    })\r\n  }\r\n}\r\nexport const getEntriesByManagerId = (managerId) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ENTRIES_LIST_BY_MANAGER_ID_REQUEST })\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        'Cache-Control': 'no-cache',\r\n      },\r\n    }\r\n    const { data } = await axios.get(`/api/entradas/lista-gestor/${managerId}`, config)\r\n\r\n    dispatch({ type: ENTRIES_LIST_BY_MANAGER_ID_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ENTRIES_LIST_BY_MANAGER_ID_FAIL,\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    })\r\n  }\r\n}\r\nexport const getEntriesByTaskId = (taskId) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ENTRIES_LIST_BY_TASK_ID_REQUEST })\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        'Cache-Control': 'no-cache',\r\n      },\r\n    }\r\n    const { data } = await axios.get(`/api/entradas/lista-tarea/${taskId}`, config)\r\n\r\n    dispatch({ type: ENTRIES_LIST_BY_TASK_ID_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ENTRIES_LIST_BY_TASK_ID_FAIL,\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    })\r\n  }\r\n}\r\nexport const deleteEntry = (entryId) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ENTRIES_DELETE_REQUEST })\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        'Cache-Control': 'no-cache',\r\n      },\r\n    }\r\n\r\n    await axios.delete(`/api/entradas/gestores-datos/${entryId}`, config)\r\n\r\n    dispatch({ type: ENTRIES_DELETE_SUCCESS })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ENTRIES_DELETE_FAIL,\r\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n    })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}