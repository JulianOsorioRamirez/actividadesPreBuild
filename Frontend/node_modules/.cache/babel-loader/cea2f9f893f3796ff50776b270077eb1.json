{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\AsignValidatorScreen\\\\components\\\\AsignValidatorFilter.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormControl, InputLabel, makeStyles, MenuItem, Select as Selectable } from '@material-ui/core';\nimport GridItem from 'components/Grid/GridItem';\nimport roles from 'config/roles/roles';\nimport { USER_LIST_BY_ROLE_NAME_RESET } from 'redux/constants/userConstants';\nimport { TEAM_WORKS_BY_VALIDATOR_RESET } from 'redux/constants/teamWorkConstants';\nimport { getUsersByRoleName } from 'redux/actions/userActions';\nimport styles from '../styles/asignValidatorStyles';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(styles);\n\nvar AsignValidatorFilter = function AsignValidatorFilter(_ref) {\n  _s();\n\n  var setCurrentJobPositionId = _ref.setCurrentJobPositionId,\n      currentJobPositionId = _ref.currentJobPositionId;\n  var dispatch = useDispatch();\n  var classes = useStyles();\n\n  var _useSelector = useSelector(function (state) {\n    return state.userListByRoleName;\n  }),\n      successUserListByRoleName = _useSelector.successUserListByRoleName,\n      loadingUserListByRoleName = _useSelector.loadingUserListByRoleName,\n      userListByRoleNameData = _useSelector.userListByRoleNameData,\n      errorUserListByRoleName = _useSelector.errorUserListByRoleName;\n\n  useEffect(function () {\n    if (!successUserListByRoleName && !errorUserListByRoleName) {\n      dispatch(getUsersByRoleName(roles.VALIDADOR_ROLE));\n    }\n  }, [successUserListByRoleName, errorUserListByRoleName]);\n  useEffect(function () {\n    return dispatch({\n      type: USER_LIST_BY_ROLE_NAME_RESET\n    });\n  }, [dispatch]);\n\n  var isEmpty = function isEmpty(arr) {\n    return arr.length <= 0;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loadingUserListByRoleName ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Cargando\"\n    }, void 0, false) : userListByRoleNameData && /*#__PURE__*/_jsxDEV(GridItem, {\n      xs: 12,\n      md: 6,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          htmlFor: \"asign-validator\",\n          children: isEmpty(userListByRoleNameData) ? 'No hay Validadores para seleccionar' : 'Validador *'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(Selectable, {\n          MenuProps: {\n            className: classes.selectMenu\n          },\n          className: classes.select,\n          value: currentJobPositionId,\n          onChange: function onChange(e) {\n            dispatch({\n              type: TEAM_WORKS_BY_VALIDATOR_RESET\n            });\n            setCurrentJobPositionId(e.target.value);\n          },\n          disabled: isEmpty(userListByRoleNameData),\n          inputProps: {\n            name: 'asign-validator',\n            id: 'asign-validator'\n          },\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            disabled: true,\n            classes: {\n              root: classes.selectMenuItem\n            },\n            children: \"Selecciona uno\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, _this), userListByRoleNameData.map(function (positionJob, index) {\n            return /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: positionJob.id_puesto,\n              classes: {\n                root: classes.selectMenuItem,\n                selected: classes.selectMenuItemSelected\n              },\n              children: \"\".concat(positionJob.nombre, \" \").concat(positionJob === null || positionJob === void 0 ? void 0 : positionJob.apellido1, \" \").concat(positionJob === null || positionJob === void 0 ? void 0 : positionJob.apellido2)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 19\n            }, _this);\n          }), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }, _this)\n  }, void 0, false);\n};\n\n_s(AsignValidatorFilter, \"1bnkMJUtKvxBJag+X7BUNdsTAg4=\", false, function () {\n  return [useDispatch, useStyles, useSelector];\n});\n\n_c = AsignValidatorFilter;\nexport default AsignValidatorFilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AsignValidatorFilter\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/src/screens/control-panel/AsignValidatorScreen/components/AsignValidatorFilter.js"],"names":["useEffect","useDispatch","useSelector","FormControl","InputLabel","makeStyles","MenuItem","Select","Selectable","GridItem","roles","USER_LIST_BY_ROLE_NAME_RESET","TEAM_WORKS_BY_VALIDATOR_RESET","getUsersByRoleName","styles","useStyles","AsignValidatorFilter","setCurrentJobPositionId","currentJobPositionId","dispatch","classes","state","userListByRoleName","successUserListByRoleName","loadingUserListByRoleName","userListByRoleNameData","errorUserListByRoleName","VALIDADOR_ROLE","type","isEmpty","arr","length","className","selectMenu","select","e","target","value","name","id","root","selectMenuItem","map","positionJob","index","id_puesto","selected","selectMenuItemSelected","nombre","apellido1","apellido2"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FormControl, InputLabel, makeStyles, MenuItem, Select as Selectable } from '@material-ui/core'\r\nimport GridItem from 'components/Grid/GridItem'\r\nimport roles from 'config/roles/roles'\r\nimport { USER_LIST_BY_ROLE_NAME_RESET } from 'redux/constants/userConstants'\r\nimport { TEAM_WORKS_BY_VALIDATOR_RESET } from 'redux/constants/teamWorkConstants'\r\nimport { getUsersByRoleName } from 'redux/actions/userActions'\r\nimport styles from '../styles/asignValidatorStyles'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nconst AsignValidatorFilter = ({ setCurrentJobPositionId, currentJobPositionId }) => {\r\n  const dispatch = useDispatch()\r\n  const classes = useStyles()\r\n\r\n  const {\r\n    successUserListByRoleName,\r\n    loadingUserListByRoleName,\r\n    userListByRoleNameData,\r\n    errorUserListByRoleName,\r\n  } = useSelector((state) => state.userListByRoleName)\r\n\r\n  useEffect(() => {\r\n    if (!successUserListByRoleName && !errorUserListByRoleName) {\r\n      dispatch(getUsersByRoleName(roles.VALIDADOR_ROLE))\r\n    }\r\n  }, [successUserListByRoleName, errorUserListByRoleName])\r\n\r\n  useEffect(() => {\r\n    return dispatch({ type: USER_LIST_BY_ROLE_NAME_RESET })\r\n  }, [dispatch])\r\n  const isEmpty = (arr) => arr.length <= 0\r\n  return (\r\n    <>\r\n      {loadingUserListByRoleName ? (\r\n        <>Cargando</>\r\n      ) : (\r\n        userListByRoleNameData && (\r\n          <GridItem xs={12} md={6}>\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor='asign-validator'>\r\n                {isEmpty(userListByRoleNameData) ? 'No hay Validadores para seleccionar' : 'Validador *'}\r\n              </InputLabel>\r\n              <Selectable\r\n                MenuProps={{\r\n                  className: classes.selectMenu,\r\n                }}\r\n                className={classes.select}\r\n                value={currentJobPositionId}\r\n                onChange={(e) => {\r\n                  dispatch({ type: TEAM_WORKS_BY_VALIDATOR_RESET })\r\n                  setCurrentJobPositionId(e.target.value)\r\n                }}\r\n                disabled={isEmpty(userListByRoleNameData)}\r\n                inputProps={{\r\n                  name: 'asign-validator',\r\n                  id: 'asign-validator',\r\n                }}\r\n              >\r\n                <MenuItem\r\n                  disabled\r\n                  classes={{\r\n                    root: classes.selectMenuItem,\r\n                  }}\r\n                >\r\n                  Selecciona uno\r\n                </MenuItem>\r\n                {userListByRoleNameData.map((positionJob, index) => (\r\n                  <MenuItem\r\n                    value={positionJob.id_puesto}\r\n                    key={index}\r\n                    classes={{ root: classes.selectMenuItem, selected: classes.selectMenuItemSelected }}\r\n                  >\r\n                    {`${positionJob.nombre} ${positionJob?.apellido1} ${positionJob?.apellido2}`}\r\n                  </MenuItem>\r\n                ))}\r\n                )\r\n              </Selectable>\r\n            </FormControl>\r\n          </GridItem>\r\n        )\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AsignValidatorFilter\r\n"]},"metadata":{},"sourceType":"module"}