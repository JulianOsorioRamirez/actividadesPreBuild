{"ast":null,"code":"import _objectSpread from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\CodigoFuente\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\Catalog\\\\Task\\\\TaskListScreen\\\\components\\\\UpdateModal\\\\UpdateTaskModal.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport UpdateActionModal from 'components/ReactTableActions/Update/UpdateActionModal';\nimport Inputs from './Inputs';\nimport { taskUpdateInfo } from 'redux/actions/taskActions';\nimport { TASK_LIST_RESET, TASK_UPDATE_RESET } from 'redux/constants/taskConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar UpdateTaskModal = function UpdateTaskModal(_ref) {\n  _s();\n\n  var handleCloseModal = _ref.handleCloseModal,\n      updateTaskModal = _ref.updateTaskModal,\n      showUpdateTask = _ref.showUpdateTask;\n  var dispatch = useDispatch();\n\n  var _useState = useState(showUpdateTask),\n      _useState2 = _slicedToArray(_useState, 2),\n      infoTask = _useState2[0],\n      setInfoTask = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.taskUpdate;\n  }),\n      loadingTaskUpdate = _useSelector.loadingTaskUpdate,\n      errorTaskUpdate = _useSelector.errorTaskUpdate,\n      successTaskUpdate = _useSelector.successTaskUpdate;\n\n  useEffect(function () {\n    if (successTaskUpdate) {\n      dispatch({\n        type: TASK_LIST_RESET\n      });\n      setTimeout(function () {\n        dispatch({\n          type: TASK_UPDATE_RESET\n        });\n        handleCloseModal();\n      }, 1000);\n    }\n  }, [successTaskUpdate]);\n\n  var updateTaskHandler = function updateTaskHandler(e) {\n    e.preventDefault();\n    dispatch(taskUpdateInfo(_objectSpread(_objectSpread({}, infoTask), {}, {\n      id_puesto: 1\n    })));\n  };\n\n  return /*#__PURE__*/_jsxDEV(UpdateActionModal, {\n    handleSubmit: updateTaskHandler,\n    handleCloseModal: handleCloseModal,\n    open: updateTaskModal,\n    modalTitle: \"Editar Tarea\",\n    errorUpdate: errorTaskUpdate,\n    succesUpdate: successTaskUpdate,\n    loadingUpdate: loadingTaskUpdate,\n    children: /*#__PURE__*/_jsxDEV(Inputs, {\n      infoTask: infoTask,\n      setInfoTask: setInfoTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(UpdateTaskModal, \"h5fGm2zXkIXpb0ZoV2peb1EuAOs=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = UpdateTaskModal;\nexport default UpdateTaskModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateTaskModal\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/src/screens/control-panel/Catalog/Task/TaskListScreen/components/UpdateModal/UpdateTaskModal.js"],"names":["useState","useEffect","useDispatch","useSelector","UpdateActionModal","Inputs","taskUpdateInfo","TASK_LIST_RESET","TASK_UPDATE_RESET","UpdateTaskModal","handleCloseModal","updateTaskModal","showUpdateTask","dispatch","infoTask","setInfoTask","state","taskUpdate","loadingTaskUpdate","errorTaskUpdate","successTaskUpdate","type","setTimeout","updateTaskHandler","e","preventDefault","id_puesto"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,iBAAP,MAA8B,uDAA9B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,+BAAnD;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAA2D;AAAA;;AAAA,MAAxDC,gBAAwD,QAAxDA,gBAAwD;AAAA,MAAtCC,eAAsC,QAAtCA,eAAsC;AAAA,MAArBC,cAAqB,QAArBA,cAAqB;AACjF,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;;AAEA,kBAAgCF,QAAQ,CAACY,cAAD,CAAxC;AAAA;AAAA,MAAOE,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,qBAAkEZ,WAAW,CAAC,UAACa,KAAD;AAAA,WAAWA,KAAK,CAACC,UAAjB;AAAA,GAAD,CAA7E;AAAA,MAAQC,iBAAR,gBAAQA,iBAAR;AAAA,MAA2BC,eAA3B,gBAA2BA,eAA3B;AAAA,MAA4CC,iBAA5C,gBAA4CA,iBAA5C;;AAEAnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAImB,iBAAJ,EAAuB;AACrBP,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAEd;AAAR,OAAD,CAAR;AACAe,MAAAA,UAAU,CAAC,YAAM;AACfT,QAAAA,QAAQ,CAAC;AAAEQ,UAAAA,IAAI,EAAEb;AAAR,SAAD,CAAR;AACAE,QAAAA,gBAAgB;AACjB,OAHS,EAGP,IAHO,CAAV;AAID;AACF,GARQ,EAQN,CAACU,iBAAD,CARM,CAAT;;AAUA,MAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,CAAD,EAAO;AAC/BA,IAAAA,CAAC,CAACC,cAAF;AACAZ,IAAAA,QAAQ,CAACP,cAAc,iCAAMQ,QAAN;AAAgBY,MAAAA,SAAS,EAAE;AAA3B,OAAf,CAAR;AACD,GAHD;;AAIA,sBACE,QAAC,iBAAD;AACE,IAAA,YAAY,EAAEH,iBADhB;AAEE,IAAA,gBAAgB,EAAEb,gBAFpB;AAGE,IAAA,IAAI,EAAEC,eAHR;AAIE,IAAA,UAAU,EAAC,cAJb;AAKE,IAAA,WAAW,EAAEQ,eALf;AAME,IAAA,YAAY,EAAEC,iBANhB;AAOE,IAAA,aAAa,EAAEF,iBAPjB;AAQE,IAAA,QAAQ,eAAE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEJ,QAAlB;AAA4B,MAAA,WAAW,EAAEC;AAAzC;AAAA;AAAA;AAAA;AAAA;AARZ;AAAA;AAAA;AAAA;AAAA,WADF;AAYD,CAjCD;;GAAMN,e;UACaP,W,EAIiDC,W;;;KAL9DM,e;AAmCN,eAAeA,eAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport UpdateActionModal from 'components/ReactTableActions/Update/UpdateActionModal'\r\nimport Inputs from './Inputs'\r\nimport { taskUpdateInfo } from 'redux/actions/taskActions'\r\nimport { TASK_LIST_RESET, TASK_UPDATE_RESET } from 'redux/constants/taskConstants'\r\n\r\nconst UpdateTaskModal = ({ handleCloseModal, updateTaskModal, showUpdateTask }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const [infoTask, setInfoTask] = useState(showUpdateTask)\r\n\r\n  const { loadingTaskUpdate, errorTaskUpdate, successTaskUpdate } = useSelector((state) => state.taskUpdate)\r\n\r\n  useEffect(() => {\r\n    if (successTaskUpdate) {\r\n      dispatch({ type: TASK_LIST_RESET })\r\n      setTimeout(() => {\r\n        dispatch({ type: TASK_UPDATE_RESET })\r\n        handleCloseModal()\r\n      }, 1000)\r\n    }\r\n  }, [successTaskUpdate])\r\n\r\n  const updateTaskHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(taskUpdateInfo({ ...infoTask, id_puesto: 1 }))\r\n  }\r\n  return (\r\n    <UpdateActionModal\r\n      handleSubmit={updateTaskHandler}\r\n      handleCloseModal={handleCloseModal}\r\n      open={updateTaskModal}\r\n      modalTitle='Editar Tarea'\r\n      errorUpdate={errorTaskUpdate}\r\n      succesUpdate={successTaskUpdate}\r\n      loadingUpdate={loadingTaskUpdate}\r\n      children={<Inputs infoTask={infoTask} setInfoTask={setInfoTask} />}\r\n    />\r\n  )\r\n}\r\n\r\nexport default UpdateTaskModal\r\n"]},"metadata":{},"sourceType":"module"}