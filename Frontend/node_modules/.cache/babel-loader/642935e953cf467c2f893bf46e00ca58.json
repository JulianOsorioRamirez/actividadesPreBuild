{"ast":null,"code":"import _objectSpread from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\CodigoFuente\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\Catalog\\\\ObjetivesOrdExtOther\\\\ObjetiveOrdExtOtherRegister\\\\components\\\\OrdExtOtherTaskSelect.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormControl, Select as Selectable, InputLabel, makeStyles, MenuItem } from '@material-ui/core';\nimport GridItem from 'components/Grid/GridItem';\nimport { getTaskOthers } from 'redux/actions/taskOtherActions';\nimport { TASK_OTHER_LIST_RESET } from 'redux/constants/taskOtherConstants';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar OrdExtOtherTaskSelect = function OrdExtOtherTaskSelect(_ref) {\n  _s();\n\n  var toggleHasDifficulty = _ref.toggleHasDifficulty,\n      objetiveOrdExtOther = _ref.objetiveOrdExtOther,\n      setObjetiveOrdExtOther = _ref.setObjetiveOrdExtOther;\n  var dispatch = useDispatch();\n  var classes = {};\n\n  var _useSelector = useSelector(function (state) {\n    return state.taskOtherList;\n  }),\n      loadingTaskOtherList = _useSelector.loadingTaskOtherList,\n      taskOthers = _useSelector.taskOthers,\n      successTaskOtherList = _useSelector.successTaskOtherList;\n\n  useEffect(function () {\n    if (!successTaskOtherList) {\n      dispatch(getTaskOthers());\n    }\n  }, [successTaskOtherList]);\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: TASK_OTHER_LIST_RESET\n      });\n    };\n  }, [dispatch]);\n\n  var handleChange = function handleChange(e) {\n    var dificultad = e.target.value.dificultad;\n    setObjetiveOrdExtOther(_objectSpread(_objectSpread({}, objetiveOrdExtOther), {}, {\n      task: e.target.value\n    }));\n    dificultad === 'SI' && toggleHasDifficulty(true);\n  };\n\n  var isEmpty = function isEmpty(array) {\n    return array.length <= 0;\n  };\n\n  return /*#__PURE__*/_jsxDEV(GridItem, {\n    xs: 6,\n    children: loadingTaskOtherList ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Cargando\"\n    }, void 0, false) : taskOthers && /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        htmlFor: \"tasks\",\n        children: isEmpty(taskOthers) ? 'No hay Tareas para seleccionar' : 'Tareas Ord/Ext'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(Selectable, {\n        MenuProps: {\n          className: classes.selectMenu\n        },\n        className: classes.select,\n        disabled: isEmpty(taskOthers),\n        value: objetiveOrdExtOther.task,\n        onChange: function onChange(e) {\n          return handleChange(e);\n        },\n        inputProps: {\n          name: 'tasks',\n          id: 'tasks'\n        },\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          disabled: true,\n          classes: {\n            root: classes.selectMenuItem\n          },\n          children: \"Seleccione una tarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, _this), taskOthers.map(function (task, index) {\n          return /*#__PURE__*/_jsxDEV(MenuItem, {\n            classes: {\n              root: classes.selectMenuItem,\n              selected: classes.selectMenuItemSelected\n            },\n            value: task,\n            id: task.id_tarea,\n            children: \"TAREA: \".concat(task.descripcion_tarea, \" PERFIL: \").concat(task.codigo_perfil)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, _this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(OrdExtOtherTaskSelect, \"mUbxSTeLJvUZ+7VngWkjrjEx/gU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = OrdExtOtherTaskSelect;\nexport default OrdExtOtherTaskSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrdExtOtherTaskSelect\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/src/screens/control-panel/Catalog/ObjetivesOrdExtOther/ObjetiveOrdExtOtherRegister/components/OrdExtOtherTaskSelect.js"],"names":["useEffect","useDispatch","useSelector","FormControl","Select","Selectable","InputLabel","makeStyles","MenuItem","GridItem","getTaskOthers","TASK_OTHER_LIST_RESET","OrdExtOtherTaskSelect","toggleHasDifficulty","objetiveOrdExtOther","setObjetiveOrdExtOther","dispatch","classes","state","taskOtherList","loadingTaskOtherList","taskOthers","successTaskOtherList","type","handleChange","e","dificultad","target","value","task","isEmpty","array","length","className","selectMenu","select","name","id","root","selectMenuItem","map","index","selected","selectMenuItemSelected","id_tarea","descripcion_tarea","codigo_perfil"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FormControl, Select as Selectable, InputLabel, makeStyles, MenuItem } from '@material-ui/core'\r\nimport GridItem from 'components/Grid/GridItem'\r\nimport { getTaskOthers } from 'redux/actions/taskOtherActions'\r\nimport { TASK_OTHER_LIST_RESET } from 'redux/constants/taskOtherConstants'\r\n\r\nconst OrdExtOtherTaskSelect = ({ toggleHasDifficulty, objetiveOrdExtOther, setObjetiveOrdExtOther }) => {\r\n  const dispatch = useDispatch()\r\n  const classes = {}\r\n\r\n  const { loadingTaskOtherList, taskOthers, successTaskOtherList } = useSelector((state) => state.taskOtherList)\r\n\r\n  useEffect(() => {\r\n    if (!successTaskOtherList) {\r\n      dispatch(getTaskOthers())\r\n    }\r\n  }, [successTaskOtherList])\r\n\r\n  useEffect(() => {\r\n    return () => dispatch({ type: TASK_OTHER_LIST_RESET })\r\n  }, [dispatch])\r\n\r\n  const handleChange = (e) => {\r\n    const { dificultad } = e.target.value\r\n    setObjetiveOrdExtOther({ ...objetiveOrdExtOther, task: e.target.value })\r\n    dificultad === 'SI' && toggleHasDifficulty(true)\r\n  }\r\n\r\n  const isEmpty = (array) => array.length <= 0\r\n\r\n  return (\r\n    <GridItem xs={6}>\r\n      {loadingTaskOtherList ? (\r\n        <>Cargando</>\r\n      ) : (\r\n        taskOthers && (\r\n          <FormControl fullWidth>\r\n            <InputLabel htmlFor='tasks'>\r\n              {isEmpty(taskOthers) ? 'No hay Tareas para seleccionar' : 'Tareas Ord/Ext'}\r\n            </InputLabel>\r\n            <Selectable\r\n              MenuProps={{\r\n                className: classes.selectMenu,\r\n              }}\r\n              className={classes.select}\r\n              disabled={isEmpty(taskOthers)}\r\n              value={objetiveOrdExtOther.task}\r\n              onChange={(e) => handleChange(e)}\r\n              inputProps={{\r\n                name: 'tasks',\r\n                id: 'tasks',\r\n              }}\r\n            >\r\n              <MenuItem\r\n                disabled\r\n                classes={{\r\n                  root: classes.selectMenuItem,\r\n                }}\r\n              >\r\n                Seleccione una tarea\r\n              </MenuItem>\r\n              {taskOthers.map((task, index) => (\r\n                <MenuItem\r\n                  classes={{ root: classes.selectMenuItem, selected: classes.selectMenuItemSelected }}\r\n                  value={task}\r\n                  id={task.id_tarea}\r\n                  key={index}\r\n                >\r\n                  {`TAREA: ${task.descripcion_tarea} PERFIL: ${task.codigo_perfil}`}\r\n                </MenuItem>\r\n              ))}\r\n            </Selectable>\r\n          </FormControl>\r\n        )\r\n      )}\r\n    </GridItem>\r\n  )\r\n}\r\n\r\nexport default OrdExtOtherTaskSelect\r\n"]},"metadata":{},"sourceType":"module"}