{"ast":null,"code":"import _slicedToArray from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\CodigoFuente\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\DashboardScreen\\\\components\\\\RolMultiSelect.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core';\nimport GridItem from 'components/Grid/GridItem';\nimport MultiSelectRoles from 'components/MultiSelectRoles/MultiSelectRoles';\nimport { ROLE_LIST_RESET } from 'redux/constants/roleConstants';\nimport { getRoles, getRolesRelated } from 'redux/actions/roleActions';\nimport styles from '../styles/multiSelectStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(styles);\n\nvar RolMultiSelect = function RolMultiSelect(_ref) {\n  _s();\n\n  var rolesData = _ref.rolesData,\n      setRolesData = _ref.setRolesData,\n      _ref$relatedPositions = _ref.relatedPositions,\n      relatedPositions = _ref$relatedPositions === void 0 ? false : _ref$relatedPositions;\n  var classes = useStyles();\n  var dispatch = useDispatch();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.roleList;\n  }),\n      successRoleList = _useSelector.successRoleList,\n      roles = _useSelector.roles;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.roleRelatedList;\n  }),\n      successRoleRelatedList = _useSelector2.successRoleRelatedList,\n      rolesRelated = _useSelector2.rolesRelated;\n\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: ROLE_LIST_RESET\n      });\n    };\n  }, [dispatch]);\n  useEffect(function () {\n    if (relatedPositions) return;\n\n    if (!successRoleList) {\n      dispatch(getRoles());\n    } else {\n      var filteredProfiles = roles.filter(function (p) {\n        return p.codigo_rol !== '';\n      });\n      setData(filteredProfiles);\n    }\n  }, [successRoleList]);\n  useEffect(function () {\n    if (!relatedPositions) return;\n\n    if (!successRoleRelatedList) {\n      dispatch(getRolesRelated());\n    } else {\n      var filteredProfiles = rolesRelated.filter(function (p) {\n        return p.codigo_rol !== '';\n      });\n      setData(filteredProfiles);\n    }\n  }, [successRoleRelatedList]);\n\n  var handleChangeMultiData = function handleChangeMultiData(event) {\n    var value = event.target.value;\n\n    if (rolesData.map(function (rol) {\n      return rol.id_rol;\n    }).indexOf(value[value.length - 1].id_rol) === -1) {\n      setRolesData(value);\n    } else {\n      setRolesData(rolesData.filter(function (rol) {\n        var _value;\n\n        return rol.id_rol !== ((_value = value[value.length - 1]) === null || _value === void 0 ? void 0 : _value.id_rol);\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(GridItem, {\n    xs: 12,\n    children: /*#__PURE__*/_jsxDEV(MultiSelectRoles, {\n      label: 'Roles',\n      data: data,\n      multiData: rolesData,\n      handleChangeMultiData: handleChangeMultiData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 10\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(RolMultiSelect, \"he0+vzoxWMazgPD/HJeIIFAM7pA=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = RolMultiSelect;\nexport default RolMultiSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"RolMultiSelect\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/src/screens/control-panel/DashboardScreen/components/RolMultiSelect.js"],"names":["useState","useEffect","useDispatch","useSelector","makeStyles","GridItem","MultiSelectRoles","ROLE_LIST_RESET","getRoles","getRolesRelated","styles","useStyles","RolMultiSelect","rolesData","setRolesData","relatedPositions","classes","dispatch","data","setData","state","roleList","successRoleList","roles","roleRelatedList","successRoleRelatedList","rolesRelated","type","filteredProfiles","filter","p","codigo_rol","handleChangeMultiData","event","value","target","map","rol","id_rol","indexOf","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport GridItem from 'components/Grid/GridItem'\r\nimport MultiSelectRoles from 'components/MultiSelectRoles/MultiSelectRoles'\r\nimport { ROLE_LIST_RESET } from 'redux/constants/roleConstants'\r\nimport { getRoles, getRolesRelated } from 'redux/actions/roleActions'\r\nimport styles from '../styles/multiSelectStyles'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nconst RolMultiSelect = ({ rolesData, setRolesData, relatedPositions = false }) => {\r\n   const classes = useStyles()\r\n   const dispatch = useDispatch()\r\n   const [data, setData] = useState([])\r\n\r\n   const { successRoleList, roles } = useSelector(\r\n      (state) => state.roleList\r\n   )\r\n\r\n   const { successRoleRelatedList, rolesRelated } = useSelector(\r\n      (state) => state.roleRelatedList\r\n   )\r\n\r\n   useEffect(() => {\r\n      return () => dispatch({ type: ROLE_LIST_RESET })\r\n   }, [dispatch])\r\n\r\n   useEffect(() => {\r\n      if ( relatedPositions ) return\r\n\r\n      if (!successRoleList) {\r\n         dispatch(getRoles())\r\n      } else {\r\n         const filteredProfiles = roles.filter((p) => p.codigo_rol !== '')\r\n         setData(filteredProfiles)\r\n      }\r\n   }, [successRoleList])\r\n\r\n   useEffect(() => {\r\n      if ( !relatedPositions ) return\r\n\r\n      if (!successRoleRelatedList) {\r\n         dispatch(getRolesRelated())\r\n      } else {\r\n         const filteredProfiles = rolesRelated.filter((p) => p.codigo_rol !== '')\r\n         setData(filteredProfiles)\r\n      }\r\n   }, [successRoleRelatedList])\r\n\r\n   const handleChangeMultiData = (event) => {\r\n      const {\r\n         target: { value },\r\n      } = event\r\n      if (rolesData.map((rol) => rol.id_rol).indexOf(value[value.length - 1].id_rol) === -1) {\r\n         setRolesData(value)\r\n      } else {\r\n         setRolesData(rolesData.filter((rol) => rol.id_rol !== value[value.length - 1]?.id_rol))\r\n      }\r\n   }\r\n\r\n   return (\r\n      <GridItem xs={12}>\r\n         <MultiSelectRoles\r\n         label={'Roles'}\r\n         data={data}\r\n         multiData={rolesData}\r\n         handleChangeMultiData={handleChangeMultiData}\r\n         />\r\n      </GridItem>\r\n   )\r\n}\r\n\r\nexport default RolMultiSelect\r\n"]},"metadata":{},"sourceType":"module"}