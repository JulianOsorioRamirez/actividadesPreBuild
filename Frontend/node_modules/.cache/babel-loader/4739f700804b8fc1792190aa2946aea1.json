{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\CodigoFuente\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\Catalog\\\\TaskSpecific\\\\RegisterTaskSpecificScreen\\\\components\\\\JobSelect.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormControl, InputLabel, makeStyles, MenuItem, Select as Selectable } from '@material-ui/core';\nimport GridItem from 'components/Grid/GridItem';\nimport { TEAM_WORK_LIST_RESET } from 'redux/constants/teamWorkConstants';\nimport { getTeamWorks } from 'redux/actions/teamWorkActions'; // import styles from '../styles/asignResponsiblFilerStyles'\n// const useStyles = makeStyles(styles)\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar JobSelect = function JobSelect(_ref) {\n  _s();\n\n  var setCurrentJobPositionId = _ref.setCurrentJobPositionId,\n      currentJobPositionId = _ref.currentJobPositionId;\n  var dispatch = useDispatch();\n  var classes = {};\n\n  var _useSelector = useSelector(function (state) {\n    return state.teamWorkList;\n  }),\n      loadingTeamWorkList = _useSelector.loadingTeamWorkList,\n      successTeamWorkList = _useSelector.successTeamWorkList,\n      teamWorkListData = _useSelector.teamWorkListData,\n      errorTeamWorkList = _useSelector.errorTeamWorkList;\n\n  useEffect(function () {\n    if (!successTeamWorkList && !errorTeamWorkList) {\n      dispatch(getTeamWorks());\n    }\n  }, [successTeamWorkList, errorTeamWorkList]);\n  useEffect(function () {\n    return dispatch({\n      type: TEAM_WORK_LIST_RESET\n    });\n  }, [dispatch]);\n\n  var isEmpty = function isEmpty(arr) {\n    return arr.length <= 0;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loadingTeamWorkList ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Cargando\"\n    }, void 0, false) : teamWorkListData && /*#__PURE__*/_jsxDEV(GridItem, {\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          htmlFor: \"job-position\",\n          children: isEmpty(teamWorkListData) ? 'No hay Puestos de trabajo para seleccionar' : 'Puesto de Trabajo *'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(Selectable, {\n          MenuProps: {\n            className: classes.selectMenu\n          },\n          className: classes.select,\n          value: currentJobPositionId,\n          onChange: function onChange(e) {\n            setCurrentJobPositionId(e.target.value);\n          },\n          inputProps: {\n            name: 'job-position',\n            id: 'job-position'\n          },\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            disabled: true,\n            classes: {\n              root: classes.selectMenuItem\n            },\n            children: \"Selecciona uno\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, _this), teamWorkListData.map(function (positionJob, index) {\n            return /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: positionJob.id_puesto,\n              classes: {\n                root: classes.selectMenuItem,\n                selected: classes.selectMenuItemSelected\n              },\n              children: \"\".concat(positionJob.nombre, \" \").concat(positionJob === null || positionJob === void 0 ? void 0 : positionJob.apellido1, \" \").concat(positionJob === null || positionJob === void 0 ? void 0 : positionJob.apellido2)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, _this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, _this)\n  }, void 0, false);\n};\n\n_s(JobSelect, \"g1/pMcsSrzy1F8/T5CoV1Z3tK00=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = JobSelect;\nexport default JobSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobSelect\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/src/screens/control-panel/Catalog/TaskSpecific/RegisterTaskSpecificScreen/components/JobSelect.js"],"names":["useEffect","useDispatch","useSelector","FormControl","InputLabel","makeStyles","MenuItem","Select","Selectable","GridItem","TEAM_WORK_LIST_RESET","getTeamWorks","JobSelect","setCurrentJobPositionId","currentJobPositionId","dispatch","classes","state","teamWorkList","loadingTeamWorkList","successTeamWorkList","teamWorkListData","errorTeamWorkList","type","isEmpty","arr","length","className","selectMenu","select","e","target","value","name","id","root","selectMenuItem","map","positionJob","index","id_puesto","selected","selectMenuItemSelected","nombre","apellido1","apellido2"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FormControl, InputLabel, makeStyles, MenuItem, Select as Selectable } from '@material-ui/core'\r\nimport GridItem from 'components/Grid/GridItem'\r\nimport { TEAM_WORK_LIST_RESET } from 'redux/constants/teamWorkConstants'\r\nimport { getTeamWorks } from 'redux/actions/teamWorkActions'\r\n// import styles from '../styles/asignResponsiblFilerStyles'\r\n\r\n// const useStyles = makeStyles(styles)\r\n\r\nconst JobSelect = ({ setCurrentJobPositionId, currentJobPositionId }) => {\r\n  const dispatch = useDispatch()\r\n  const classes = {}\r\n\r\n  const { loadingTeamWorkList, successTeamWorkList, teamWorkListData, errorTeamWorkList } = useSelector(\r\n    (state) => state.teamWorkList\r\n  )\r\n  useEffect(() => {\r\n    if (!successTeamWorkList && !errorTeamWorkList) {\r\n      dispatch(getTeamWorks())\r\n    }\r\n  }, [successTeamWorkList, errorTeamWorkList])\r\n\r\n  useEffect(() => {\r\n    return dispatch({ type: TEAM_WORK_LIST_RESET })\r\n  }, [dispatch])\r\n\r\n  const isEmpty = (arr) => arr.length <= 0\r\n\r\n  return (\r\n    <>\r\n      {loadingTeamWorkList ? (\r\n        <>Cargando</>\r\n      ) : (\r\n        teamWorkListData && (\r\n          <GridItem xs={12}>\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor='job-position'>\r\n                {isEmpty(teamWorkListData) ? 'No hay Puestos de trabajo para seleccionar' : 'Puesto de Trabajo *'}\r\n              </InputLabel>\r\n              <Selectable\r\n                MenuProps={{\r\n                  className: classes.selectMenu,\r\n                }}\r\n                className={classes.select}\r\n                value={currentJobPositionId}\r\n                onChange={(e) => {\r\n                  setCurrentJobPositionId(e.target.value)\r\n                }}\r\n                inputProps={{\r\n                  name: 'job-position',\r\n                  id: 'job-position',\r\n                }}\r\n              >\r\n                <MenuItem\r\n                  disabled\r\n                  classes={{\r\n                    root: classes.selectMenuItem,\r\n                  }}\r\n                >\r\n                  Selecciona uno\r\n                </MenuItem>\r\n                {teamWorkListData.map((positionJob, index) => (\r\n                  <MenuItem\r\n                    value={positionJob.id_puesto}\r\n                    key={index}\r\n                    classes={{ root: classes.selectMenuItem, selected: classes.selectMenuItemSelected }}\r\n                  >{`${positionJob.nombre} ${positionJob?.apellido1} ${positionJob?.apellido2}`}</MenuItem>\r\n                ))}\r\n              </Selectable>\r\n            </FormControl>\r\n          </GridItem>\r\n        )\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default JobSelect\r\n"]},"metadata":{},"sourceType":"module"}