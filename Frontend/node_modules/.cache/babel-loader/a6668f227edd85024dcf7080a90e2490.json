{"ast":null,"code":"import _objectSpread from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\CodigoFuente\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\Catalog\\\\Service\\\\ServiceListScreen\\\\components\\\\UpdateServiceModal.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dialog, DialogContent, DialogTitle, makeStyles } from '@material-ui/core';\nimport { Close } from '@material-ui/icons';\nimport Button from 'components/CustomButtons/Button';\nimport GridContainer from 'components/Grid/GridContainer';\nimport CustomInput from 'components/CustomInput/CustomInput';\nimport GridItem from 'components/Grid/GridItem';\nimport SnackbarContent from 'components/Snackbar/SnackbarContent';\nimport { SERVICE_UPDATE_RESET } from 'redux/constants/serviceConstants';\nimport { serviceUpdateInfo, getServices } from 'redux/actions/serviceActions';\nimport styles from '../styles/updateServiceModalStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(styles);\n\nvar UpdateServiceModal = function UpdateServiceModal(_ref) {\n  _s();\n\n  var handleCloseModal = _ref.handleCloseModal,\n      updateServiceModal = _ref.updateServiceModal,\n      showUpdateService = _ref.showUpdateService;\n  var classes = useStyles();\n  var dispatch = useDispatch();\n\n  var _useState = useState(showUpdateService),\n      _useState2 = _slicedToArray(_useState, 2),\n      infoService = _useState2[0],\n      setInfoService = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.serviceUpdate;\n  }),\n      loadingServiceUpdate = _useSelector.loadingServiceUpdate,\n      errorServiceUpdate = _useSelector.errorServiceUpdate,\n      successServiceUpdate = _useSelector.successServiceUpdate;\n\n  useEffect(function () {\n    if (successServiceUpdate) {\n      dispatch(getServices());\n      setTimeout(function () {\n        dispatch({\n          type: SERVICE_UPDATE_RESET\n        });\n        handleCloseModal();\n      }, 1000);\n    }\n  }, [successServiceUpdate]);\n\n  var updateServiceHandler = function updateServiceHandler(e) {\n    e.preventDefault();\n    dispatch(serviceUpdateInfo(infoService));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: updateServiceModal,\n    keepMounted: true,\n    onClose: handleCloseModal,\n    \"aria-labelledby\": \"notice-modal-slide-title\",\n    \"aria-describedby\": \"notice-modal-slide-description\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateServiceHandler,\n      autoComplete: \"false\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"notice-modal-slide-title\",\n        disableTypography: true,\n        className: classes.modalHeader,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          justIcon: true,\n          className: classes.modalCloseButton,\n          \"aria-label\": \"Close\",\n          color: \"transparent\",\n          onClick: handleCloseModal,\n          children: /*#__PURE__*/_jsxDEV(Close, {\n            className: classes.modalClose\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, _this)\n        }, 'close', false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: classes.modalTitle,\n          children: \"Editar Servicio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        id: \"notice-modal-slide-description\",\n        className: classes.modalBody,\n        children: [/*#__PURE__*/_jsxDEV(GridContainer, {\n          children: [/*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(CustomInput, {\n              labelText: 'COD. SERVICIO',\n              id: \"codeService\",\n              formControlProps: {\n                fullWidth: true\n              },\n              inputProps: {\n                value: infoService.codigo_servicio,\n                onChange: function onChange(e) {\n                  return setInfoService(_objectSpread(_objectSpread({}, infoService), {}, {\n                    codigo_servicio: e.target.value\n                  }));\n                },\n                type: 'text',\n                required: true\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(CustomInput, {\n              labelText: 'DESCRIPCION',\n              id: \"description\",\n              formControlProps: {\n                fullWidth: true\n              },\n              inputProps: {\n                value: infoService.descripcion_servicio,\n                onChange: function onChange(e) {\n                  return setInfoService(_objectSpread(_objectSpread({}, infoService), {}, {\n                    descripcion_servicio: e.target.value\n                  }));\n                },\n                type: 'text',\n                required: true\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            style: {\n              margin: '20px 0 0',\n              display: 'flex',\n              justifyContent: 'flex-end'\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              color: successServiceUpdate ? 'success' : 'primary',\n              block: true,\n              children: loadingServiceUpdate ? 'Actualizando...' : successServiceUpdate ? 'Servicio Actualizado' : 'Actualizar Servicio'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, _this), errorServiceUpdate && /*#__PURE__*/_jsxDEV(GridContainer, {\n          children: /*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(SnackbarContent, {\n              message: errorServiceUpdate,\n              color: \"danger\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(UpdateServiceModal, \"vASAXeJIaG6j9M/d3R8R83qplEE=\", false, function () {\n  return [useStyles, useDispatch, useSelector];\n});\n\n_c = UpdateServiceModal;\nexport default UpdateServiceModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateServiceModal\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/CodigoFuente/Frontend/src/screens/control-panel/Catalog/Service/ServiceListScreen/components/UpdateServiceModal.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Dialog","DialogContent","DialogTitle","makeStyles","Close","Button","GridContainer","CustomInput","GridItem","SnackbarContent","SERVICE_UPDATE_RESET","serviceUpdateInfo","getServices","styles","useStyles","UpdateServiceModal","handleCloseModal","updateServiceModal","showUpdateService","classes","dispatch","infoService","setInfoService","state","serviceUpdate","loadingServiceUpdate","errorServiceUpdate","successServiceUpdate","setTimeout","type","updateServiceHandler","e","preventDefault","modalHeader","modalCloseButton","modalClose","modalTitle","modalBody","fullWidth","value","codigo_servicio","onChange","target","required","descripcion_servicio","margin","display","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Dialog, DialogContent, DialogTitle, makeStyles } from '@material-ui/core'\r\nimport { Close } from '@material-ui/icons'\r\nimport Button from 'components/CustomButtons/Button'\r\nimport GridContainer from 'components/Grid/GridContainer'\r\nimport CustomInput from 'components/CustomInput/CustomInput'\r\nimport GridItem from 'components/Grid/GridItem'\r\nimport SnackbarContent from 'components/Snackbar/SnackbarContent'\r\nimport { SERVICE_UPDATE_RESET } from 'redux/constants/serviceConstants'\r\nimport { serviceUpdateInfo, getServices } from 'redux/actions/serviceActions'\r\nimport styles from '../styles/updateServiceModalStyles'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nconst UpdateServiceModal = ({ handleCloseModal, updateServiceModal, showUpdateService }) => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n\r\n  const [infoService, setInfoService] = useState(showUpdateService)\r\n\r\n  const { loadingServiceUpdate, errorServiceUpdate, successServiceUpdate } = useSelector((state) => state.serviceUpdate)\r\n\r\n  useEffect(() => {\r\n    if (successServiceUpdate) {\r\n      dispatch(getServices())\r\n      setTimeout(() => {\r\n        dispatch({ type: SERVICE_UPDATE_RESET })\r\n        handleCloseModal()\r\n      }, 1000)\r\n    }\r\n  }, [successServiceUpdate])\r\n\r\n  const updateServiceHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(serviceUpdateInfo(infoService))\r\n  }\r\n  return (\r\n    <Dialog\r\n      open={updateServiceModal}\r\n      keepMounted\r\n      onClose={handleCloseModal}\r\n      aria-labelledby='notice-modal-slide-title'\r\n      aria-describedby='notice-modal-slide-description'\r\n    >\r\n      <form onSubmit={updateServiceHandler} autoComplete='false'>\r\n        <DialogTitle id='notice-modal-slide-title' disableTypography className={classes.modalHeader}>\r\n          <Button\r\n            justIcon\r\n            className={classes.modalCloseButton}\r\n            key='close'\r\n            aria-label='Close'\r\n            color='transparent'\r\n            onClick={handleCloseModal}\r\n          >\r\n            <Close className={classes.modalClose} />\r\n          </Button>\r\n          <h4 className={classes.modalTitle}>{`Editar Servicio`}</h4>\r\n        </DialogTitle>\r\n        <DialogContent id='notice-modal-slide-description' className={classes.modalBody}>\r\n          <GridContainer>\r\n            <GridItem xs={12} md={6}>\r\n              <CustomInput\r\n                labelText={'COD. SERVICIO'}\r\n                id='codeService'\r\n                formControlProps={{\r\n                  fullWidth: true,\r\n                }}\r\n                inputProps={{\r\n                  value: infoService.codigo_servicio,\r\n                  onChange: (e) => setInfoService({ ...infoService, codigo_servicio: e.target.value }),\r\n                  type: 'text',\r\n                  required: true,\r\n                }}\r\n              />\r\n            </GridItem>\r\n            <GridItem xs={12} md={6}>\r\n              <CustomInput\r\n                labelText={'DESCRIPCION'}\r\n                id='description'\r\n                formControlProps={{\r\n                  fullWidth: true,\r\n                }}\r\n                inputProps={{\r\n                  value: infoService.descripcion_servicio,\r\n                  onChange: (e) => setInfoService({ ...infoService, descripcion_servicio: e.target.value }),\r\n                  type: 'text',\r\n                  required: true,\r\n                }}\r\n              />\r\n            </GridItem>\r\n            <GridItem xs={12} style={{ margin: '20px 0 0', display: 'flex', justifyContent: 'flex-end' }}>\r\n              <Button type='submit' color={successServiceUpdate ? 'success' : 'primary'} block>\r\n                {loadingServiceUpdate\r\n                  ? 'Actualizando...'\r\n                  : successServiceUpdate\r\n                  ? 'Servicio Actualizado'\r\n                  : 'Actualizar Servicio'}\r\n              </Button>\r\n            </GridItem>\r\n          </GridContainer>\r\n          {errorServiceUpdate && (\r\n            <GridContainer>\r\n              <GridItem xs={12}>\r\n                <SnackbarContent message={errorServiceUpdate} color='danger' />\r\n              </GridItem>\r\n            </GridContainer>\r\n          )}\r\n        </DialogContent>\r\n      </form>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default UpdateServiceModal\r\n"]},"metadata":{},"sourceType":"module"}