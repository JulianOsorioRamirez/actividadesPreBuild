{"ast":null,"code":"import _slicedToArray from \"C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\juria\\\\OneDrive\\\\Escritorio\\\\Alehop\\\\CodigoFuente\\\\Frontend\\\\src\\\\screens\\\\control-panel\\\\Catalog\\\\TaskOther\\\\RegisterTaskOtherScreen\\\\components\\\\DuplicateTaskExtOrdOther.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport { NavLink } from 'react-router-dom';\nimport GridItem from 'components/Grid/GridItem';\nimport Button from 'components/CustomButtons/Button';\nimport DuplicateTaskExtOrdOtherList from './DuplicateTaskExtOrdOtherList';\nimport { PROFILE_LIST_RESET } from 'redux/constants/profileConstants';\nimport { getProfiles } from 'redux/actions/profileActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar DuplicateTaskExtOrdOther = function DuplicateTaskExtOrdOther(_ref) {\n  _s();\n\n  var taskType = _ref.taskType,\n      setTaskType = _ref.setTaskType;\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      profileIdToClone = _useState2[0],\n      setProfileIdToClone = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      search = _useState4[0],\n      setSearch = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.profileList;\n  }),\n      successProfileList = _useSelector.successProfileList,\n      loadingProfileList = _useSelector.loadingProfileList,\n      profiles = _useSelector.profiles;\n\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: PROFILE_LIST_RESET\n      });\n    };\n  }, [dispatch]);\n  useEffect(function () {\n    if (!successProfileList) {\n      dispatch(getProfiles());\n    }\n  }, [successProfileList]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loadingProfileList ? 'Cargando Perfiles' : profiles ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(GridItem, {\n        xs: 12,\n        sm: 6,\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"task-duplicate-type\",\n            children: \"Perfil a Duplicar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(Select, {\n            labelId: \"task-duplicate-type\",\n            id: \"task-duplicate-type\",\n            value: profileIdToClone,\n            label: \"task-duplicate-type\",\n            disabled: search,\n            onChange: function onChange(e) {\n              return setProfileIdToClone(e.target.value);\n            },\n            children: profiles.map(function (profile) {\n              return /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: profile.id_perfil,\n                children: profile.codigo_perfil\n              }, profile.id_perfil, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 19\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(GridItem, {\n        xs: 12,\n        sm: 6,\n        style: {\n          margin: '20px 0 0',\n          display: 'flex',\n          justifyContent: 'flex-end'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          color: \"primary\",\n          disabled: profileIdToClone == '',\n          block: true,\n          onClick: function onClick() {\n            return setSearch(true);\n          },\n          children: 'Buscar asignaciones'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, _this), search && /*#__PURE__*/_jsxDEV(DuplicateTaskExtOrdOtherList, {\n        id: profileIdToClone,\n        taskType: taskType,\n        setTaskType: setTaskType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n};\n\n_s(DuplicateTaskExtOrdOther, \"SqXQAzZ7S2szOeDu1DOt4DnoUEI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = DuplicateTaskExtOrdOther;\nexport default DuplicateTaskExtOrdOther;\n\nvar _c;\n\n$RefreshReg$(_c, \"DuplicateTaskExtOrdOther\");","map":{"version":3,"sources":["C:/Users/juria/OneDrive/Escritorio/Alehop/CodigoFuente/Frontend/src/screens/control-panel/Catalog/TaskOther/RegisterTaskOtherScreen/components/DuplicateTaskExtOrdOther.js"],"names":["useEffect","useState","useDispatch","useSelector","FormControl","InputLabel","MenuItem","Select","NavLink","GridItem","Button","DuplicateTaskExtOrdOtherList","PROFILE_LIST_RESET","getProfiles","DuplicateTaskExtOrdOther","taskType","setTaskType","dispatch","profileIdToClone","setProfileIdToClone","search","setSearch","state","profileList","successProfileList","loadingProfileList","profiles","type","display","alignItems","e","target","value","map","profile","id_perfil","codigo_perfil","margin","justifyContent"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core'\r\nimport { NavLink } from 'react-router-dom'\r\nimport GridItem from 'components/Grid/GridItem'\r\nimport Button from 'components/CustomButtons/Button'\r\nimport DuplicateTaskExtOrdOtherList from './DuplicateTaskExtOrdOtherList'\r\nimport { PROFILE_LIST_RESET } from 'redux/constants/profileConstants'\r\nimport { getProfiles } from 'redux/actions/profileActions'\r\n\r\nconst DuplicateTaskExtOrdOther = ({ taskType, setTaskType }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const [profileIdToClone, setProfileIdToClone] = useState('')\r\n  const [search, setSearch] = useState(false)\r\n\r\n  const { successProfileList, loadingProfileList, profiles } = useSelector((state) => state.profileList)\r\n\r\n  useEffect(() => {\r\n    return () => dispatch({ type: PROFILE_LIST_RESET })\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    if (!successProfileList) {\r\n      dispatch(getProfiles())\r\n    }\r\n  }, [successProfileList])\r\n\r\n  return (\r\n    <>\r\n      {loadingProfileList ? (\r\n        'Cargando Perfiles'\r\n      ) : profiles ? (\r\n        <>\r\n          <GridItem xs={12} sm={6} style={{ display: 'flex', alignItems: 'center' }}>\r\n            <FormControl fullWidth>\r\n              <InputLabel id='task-duplicate-type'>Perfil a Duplicar</InputLabel>\r\n              <Select\r\n                labelId='task-duplicate-type'\r\n                id='task-duplicate-type'\r\n                value={profileIdToClone}\r\n                label='task-duplicate-type'\r\n                disabled={search}\r\n                onChange={(e) => setProfileIdToClone(e.target.value)}\r\n              >\r\n                {profiles.map((profile) => (\r\n                  <MenuItem key={profile.id_perfil} value={profile.id_perfil}>\r\n                    {profile.codigo_perfil}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </GridItem>\r\n          <GridItem xs={12} sm={6} style={{ margin: '20px 0 0', display: 'flex', justifyContent: 'flex-end' }}>\r\n            <Button type='submit' color='primary' disabled={profileIdToClone==''} block onClick={() => setSearch(true)} >\r\n              {'Buscar asignaciones'}\r\n            </Button>\r\n          </GridItem>\r\n          {search && (\r\n            <DuplicateTaskExtOrdOtherList id={profileIdToClone} taskType={taskType} setTaskType={setTaskType} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DuplicateTaskExtOrdOther\r\n"]},"metadata":{},"sourceType":"module"}